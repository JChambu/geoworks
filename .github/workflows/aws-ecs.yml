name: Deploy to Amazon ECS
on:
  push:
    branches: [ "refactor/upgrade_docker" ]
env:
  AWS_REGION: "us-east-2"
  ECR_REPOSITORY: "geoworks"
  ECS_SERVICE: "geoworks-service"
  ECS_CLUSTER: "staging"
  ECS_TASK_DEFINITION: "aws/geoworks-task-definition.json"
  CONTAINER_NAME: "geoworks"
permissions:
  contents: read
jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: staging
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    - name: Login to Docker Hub
      run: |
        echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
    - name: Update task definition
      run: |
        # Read the task definition file
        task_def=$(cat ${{ env.ECS_TASK_DEFINITION }})
        
        # Update the image
        task_def=$(echo "$task_def" | jq --arg IMAGE "${{ steps.build-image.outputs.image }}" '.containerDefinitions[0].image = $IMAGE')
        
        # Update environment variables
        env_vars=$(echo '${{ toJson(secrets) }}' | jq 'to_entries | map({name: .key, value: .value}) | {environment: .}')
        task_def=$(echo "$task_def" | jq --argjson ENV "$env_vars" '.containerDefinitions[0] += $ENV')
        
        # Write the updated task definition back to the file
        echo "$task_def" > ${{ env.ECS_TASK_DEFINITION }}
    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ env.ECS_TASK_DEFINITION }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
