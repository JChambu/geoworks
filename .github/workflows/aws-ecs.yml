name: Deploy to Amazon ECS

on:
  push:
    branches: [ "refactor/upgrade_docker" ]

env:
  AWS_REGION: "us-east-2"
  ECR_REPOSITORY: "geoworks"
  ECS_SERVICE: "geoworks-service"
  ECS_CLUSTER: "staging"
  ECS_TASK_DEFINITION: "aws/geoworks-task-definition.json"
  CONTAINER_NAME: "geoworks"

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: staging
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Docker Hub
      run: |
        echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Reemplazar variables de entorno en la definiciÃ³n de tarea
      run: |
        sed -i 's/\${POSTGRES_HOST}/'${{ secrets.POSTGRES_HOST }}'/' ${{ env.ECS_TASK_DEFINITION }}
        echo "el valor de la variable es ${{ vars.POSTGRES_HOST }} y del secreto ${{ secrets.POSTGRES_HOST }}"
        sed -i "s|${POSTGRES_HOST}|${{ secrets.POSTGRES_HOST }}|g" ${{ env.ECS_TASK_DEFINITION }}
        sed -i 's/\${PRIMARY_COLOR}/'${{ env.PRIMARY_COLOR }}'/' ${{ env.ECS_TASK_DEFINITION }}
        sed -i 's/\${USER_EMAIL}/'${{ env.USER_EMAIL }}'/' ${{ env.ECS_TASK_DEFINITION }}
        sed -i 's/\${FAVICON}/'${{ env.FAVICON }}'/' ${{ env.ECS_TASK_DEFINITION }}
        sed -i 's/\${USER_PASSWORD}/'${{ env.USER_PASSWORD }}'/' ${{ env.ECS_TASK_DEFINITION }}
        sed -i 's/\${MAILER_USERNAME}/'${{ env.MAILER_USERNAME }}'/' ${{ env.ECS_TASK_DEFINITION }}
        sed -i 's/\${MAX_FILTER_RULES}/'${{ env.MAX_FILTER_RULES }}'/' ${{ env.ECS_TASK_DEFINITION }}
        sed -i 's/\${POSTGRES_USER}/'${{ env.POSTGRES_USER }}'/' ${{ env.ECS_TASK_DEFINITION }}
        sed -i 's/\${RAILS_ENV}/'${{ env.RAILS_ENV }}'/' ${{ env.ECS_TASK_DEFINITION }}
        sed -i 's/\${VERTICAL_LOGO}/'${{ env.VERTICAL_LOGO }}'/' ${{ env.ECS_TASK_DEFINITION }}
        sed -i 's/\${POSTGRES_PORT}/'${{ env.POSTGRES_PORT }}'/' ${{ env.ECS_TASK_DEFINITION }}
        sed -i 's/\${POSTGRES_DATABASE}/'${{ env.POSTGRES_DATABASE }}'/' ${{ env.ECS_TASK_DEFINITION }}
        sed -i 's/\${POSTGRES_PASSWORD}/'${{ env.POSTGRES_PASSWORD }}'/' ${{ env.ECS_TASK_DEFINITION }}
        sed -i 's/\${GEOSERVER_AUTH_KEY}/'${{ env.GEOSERVER_AUTH_KEY }}'/' ${{ env.ECS_TASK_DEFINITION }}
        sed -i 's/\${CATALINA_OPTS}/'${{ env.CATALINA_OPTS }}'/' ${{ env.ECS_TASK_DEFINITION }}
        sed -i 's/\${USER_NAME}/'${{ env.USER_NAME }}'/' ${{ env.ECS_TASK_DEFINITION }}
        sed -i 's/\${OPTIMIZE_LINE_WIDTH}/'${{ env.OPTIMIZE_LINE_WIDTH }}'/' ${{ env.ECS_TASK_DEFINITION }}
        sed -i 's/\${MAILER_DOMAIN}/'${{ env.MAILER_DOMAIN }}'/' ${{ env.ECS_TASK_DEFINITION }}
        sed -i 's/\${GEOSERVER_PORT}/'${{ env.GEOSERVER_PORT }}'/' ${{ env.ECS_TASK_DEFINITION }}
        sed -i 's/\${GEOSERVER_CSRF_WHITELIST}/'${{ env.GEOSERVER_CSRF_WHITELIST }}'/' ${{ env.ECS_TASK_DEFINITION }}
        sed -i 's/\${PRIMARY_COLOR_TRANSPARENT}/'${{ env.PRIMARY_COLOR_TRANSPARENT }}'/' ${{ env.ECS_TASK_DEFINITION }}
        sed -i 's/\${TITLE}/'${{ env.TITLE }}'/' ${{ env.ECS_TASK_DEFINITION }}
        sed -i 's/\${ENABLE_JSONP}/'${{ env.ENABLE_JSONP }}'/' ${{ env.ECS_TASK_DEFINITION }}
        sed -i 's/\${APP_PORT}/'${{ env.APP_PORT }}'/' ${{ env.ECS_TASK_DEFINITION }}
        sed -i 's/\${MAILER_PASSWORD}/'${{ env.MAILER_PASSWORD }}'/' ${{ env.ECS_TASK_DEFINITION }}
        sed -i 's/\${HORIZONTAL_LOGO}/'${{ env.HORIZONTAL_LOGO }}'/' ${{ env.ECS_TASK_DEFINITION }}

    - name: Create dynamic task definition
      id: create-task-def
      run: |
        # Read the base task definition file
        task_def=$(cat ${{ env.ECS_TASK_DEFINITION }})

        # Update the image
        task_def=$(echo "$task_def" | jq --arg IMAGE "${{ steps.build-image.outputs.image }}" '.containerDefinitions[0].image = $IMAGE')

        # Save the updated task definition to a new file
        echo "$task_def" > task-definition-updated.json
        echo "task-definition-file=task-definition-updated.json" >> $GITHUB_OUTPUT

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.create-task-def.outputs.task-definition-file }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true

