<div id="react-mapping-content" class='react-mapping-content'></div>

<% content_for :javascript do %>
  <script type='text/babel'>
    const { useMemo, useState, useCallback } = React;
    const App = ({ columnNames, projectFields, locale, projectType, projectMapping }) => {
      const [selectedColumnNames, setSelectedColumnNames] = useState({});
      const [selectedSubfields, setSelectedSubfields] = useState({});
      const [projectSubfields, setProjectSubfields] = useState([]);

      const selectedColumnNamesList = useMemo(() => Object.values(selectedColumnNames), [selectedColumnNames]);

      const availableColumnNames = useMemo(() => {
        return columnNames.filter(column => !selectedColumnNamesList.includes(column));
      }, [selectedColumnNamesList, columnNames]);

      const handleChange = useCallback(
        ({ target: { value, name } }) => {
          setSelectedColumnNames({ ...selectedColumnNames, [name]: value });
        },
        [selectedColumnNames]
      );

      const handleChangeProjectField = useCallback(
        ({ target: { value } }) => {
          $.ajax({
            url: `/${locale}/project_types/${projectType.id}/project_fields/${value}/project_subfields`,
            method: "GET",
            dataType: "json",
            error: function (xhr, status, error) {
                console.error('AJAX Error: ' + status + error);
            },
            success: function (response) {
              setProjectSubfields(response.project_subfields)
            }
          });
        },
        [locale, projectType.id]
      )

      const availableOptions = useCallback(component => {
        return (
          [
            <option value=""></option>,
            ...columnNames.map(columnName => {
                const shouldBeHidden = selectedColumnNamesList.includes(columnName);
                return <option value={columnName} className={shouldBeHidden && 'select__option--hidden'}>{columnName}</option>
              })
          ]

        )
      }, [columnNames, selectedColumnNamesList]);

      const handleChangeSubfield = useCallback(
        ({ target: { name, value } }) => {
          setSelectedSubfields({ ...selectedSubfields, [name]: value });
        },
        [selectedSubfields]
      );

      const availableSubfieldOptions = useCallback(component => {
        return (
          [
            <option value=""></option>,
            ...projectSubfields.map(projectSubfield => {
                const shouldBeHidden = Object.values(selectedSubfields).includes(`${projectSubfield.id}`) && selectedSubfields[component] !== `${projectSubfield.id}`
                return <option value={projectSubfield.id} className={shouldBeHidden && 'select__option--hidden'}>{projectSubfield.name}</option>
              })
          ]

        )
      }, [projectSubfields, selectedSubfields]);

      const availableProjectFields = useMemo(() => {
        return (
          [
            <option value=""></option>,
            ...projectFields.map(projectField => {
                return <option value={projectField.id}>{projectField.name}</option>
              })
          ]
        )
      }, [projectFields]);

      const removeColumnName = useCallback(
        columnName => () => {
          setSelectedColumnNames({ ...selectedColumnNames, [columnName]: columnName });
        },
        [selectedColumnNames]
      )

      return (
        <div className="card shadow">
          <div className="card-body">
            <h2 className="react-mapping-content__title">Definir campos a importar</h2>
            <div className="">
              <h3 className="react-mapping-content__subtitle">Datos generales</h3>
              <form className="" action="<%= import_project_type_data_children_path(@project_type) %>" method="post">
                <div className="react-mapping-content__general-data">
                  <div className="">
                    <label for="mapping[project_id]">Define cual es la columna que se relaciona con el projecto</label>
                    <select className="select" name="mapping[project_relationship]" onChange={handleChange}>
                      {availableOptions('project_id')}
                    </select>
                  </div>
                  <div className="">
                    <label for="mapping[project_id]">¿Qué valor define esa columna?</label>
                    <select className="select" name="mapping[project_field_key]" onChange={handleChange}>
                      <option value=""></option>
                      {projectMapping.map(mapping => <option value={mapping[1]}>{mapping[0]}</option>)}
                    </select>
                  </div>
                  <div className="">
                    <label for="mapping[gwm_created_at]">Define cual es la columna que define la fecha y establece el formato</label>
                    <select className="select" name="mapping[gwm_created_at]" onChange={handleChange}>
                      {availableOptions('gwm_created_at')}
                    </select>
                    <select className="select" name="mapping[gwm_created_at_format]">
                      <option value=""></option>
                      <option value="%Y-%m-%d">YYYY-MM-DD</option>
                      <option value="%d-%m-%Y">DD-MM-YYYY</option>
                      <option value="%m-%d-%Y">MM-DD-YYYY</option>
                    </select>
                  </div>
                  <div className="">
                    <label for="mapping[project_field_id]">¿A que campo corresponde la información a importar?</label>
                    <select className="select" name="mapping[project_field_id]" onChange={handleChangeProjectField}>
                      {availableProjectFields}
                    </select>
                  </div>
                  <div className="">
                    <label for="mapping[project_field_id]">Define cual es la columna que define el id del usuario:</label>
                    <select className="select" name="mapping[user_id]" onChange={handleChange}>
                      {availableOptions('user_id')}
                    </select>
                  </div>
                </div>
                <div className="react-mapping-content__data-children">
                  <h3 className="react-mapping-content__subtitle">
                    Mapeo de campos a importar
                    <span>Las columnas que no son requeridas se pueden dejar en blanco o eliminarlas</span>
                  </h3>
                  <div className="react-mapping-content__data-children__wrapper">
                    {availableColumnNames.map(columnName => {
                      return (
                        <div className="react-mapping-content__data-children__attribute" key={columnName}>
                          <label
                            for={`mapping[data_child][${columnName}]`}
                            className="react-mapping-content__data-children__attribute__name"
                          >
                            {columnName}
                          </label>
                          <i className="fa fa-arrow-right"></i>
                          <select className="select" name={`mapping[data_child][${columnName}]`} onChange={handleChangeSubfield}>
                            {availableSubfieldOptions(`mapping[data_child][${columnName}]`)}
                          </select>
                          <button
                            type="button"
                            name="button"
                            className="react-mapping-content__data-children__attribute__remove-button"
                            onClick={removeColumnName(columnName)}
                          >
                            <i class="fa fa-close"></i>
                          </button>
                        </div>
                      )
                    })}
                  </div>
                </div>
                <div className="react-mapping-content__actions">
                  <a
                    href={`/${locale}/project_types/${projectType.id}/data_children/new`}
                    className="btn btn-secondary mr-1"
                  >
                    Cancelar
                  </a>
                  <button type="sumbmit" className="enviar btn btn-primary">Guardar</button>
                </div>
              </form>
            </div>
          </div>
        </div>
      )
    }

    const columnNames = <%= raw @file_headers.to_json %>;
    const projectFields = <%= raw @project_fields.to_json %>;
    const locale = "<%= @locale %>";
    const projectType = <%= raw @project_type.to_json %>;
    const projectMapping = <%= raw @project_mapping.to_json %>;
    ReactDOM.render(
      <App
        columnNames={columnNames}
        projectFields={projectFields}
        locale={locale}
        projectType={projectType}
        projectMapping={projectMapping}
      />,
      document.querySelector('#react-mapping-content')
    );
  </script>
<% end %>
