$('<%= j render "interpolation", title: "Interpolacion" %>').on('hidden.bs.modal', function (e) {
  // Cuando se termina de ocultar el modal lo elimina para evitar que se quede pegado el tab
  $(this).remove();
  $('.modal-backdrop').remove();
}).on('shown.bs.modal', function (e) {
	$('#interpolation_field').on('change', function() {
		var type_box = 'polygon';
  	var size_box = Navarra.dashboards.config.size_polygon;
  	if (size_box.length == 0) {
    	var size_box = [];
    	type_box = 'extent';
    	size_ext = Navarra.dashboards.config.size_box;
    	size_box[0] = size_ext['_southWest']['lng'];
    	size_box[1] = size_ext['_southWest']['lat'];
    	size_box[2] = size_ext['_northEast']['lng'];
    	size_box[3] = size_ext['_northEast']['lat'];
  	}
  	var attribute_filters = Navarra.project_types.config.attribute_filters;
  	var filtered_form_ids = Navarra.project_types.config.filtered_form_ids;
		var project_type_id = Navarra.dashboards.config.project_type_id;
  	var from_date = Navarra.project_types.config.from_date;
  	var to_date = Navarra.project_types.config.to_date;
  	var interpolate_field = $(this).val();
  		$.ajax({
    		type: 'GET',
    		url: '/project_types/search_data_dashboard',
    		datatype: 'json',
    		data: {
    			is_interpolate:true,
    			interpolate_field: interpolate_field,
      		project_type_id: project_type_id,
      		type_box: type_box,
      		size_box: size_box,
      		data_conditions: attribute_filters,
      		filtered_form_ids: filtered_form_ids,
      		from_date: from_date,
      		to_date: to_date,
    		},
      		success: function(data) {
      			var intermin = Math.min.apply(null, data.data.map((v) => v.interpolate_field).filter(function(n) { return !isNaN(n); }));
      			var intermax = Math.max.apply(null, data.data.map((v) => v.interpolate_field).filter(function(n) { return !isNaN(n); }));
      			//var intermax = Math.max.apply( null, data.data[0].values.map((v) => v.p_name));
      			var num_ranges = $('#range_number').val();
      			var interrange = (intermax - intermin)/$('#range_number').val();
      			value_range = intermin;
      			if(intermax>10){round=1}else{round=100}
				for(var i=0;i<num_ranges;i++){
					if(i==0){
						val = Math.floor(value_range*round)/round;
					} else {
						val = Math.round(value_range*round)/round;
					}
					$('#intermin_'+i).val(val);
					value_range += interrange;
					if(i==num_ranges){
						val = Math.ceil(value_range*round)/round;
					} else {
						val = Math.round(value_range*round)/round;
					}
					$('#intermax_'+i).val(val);
				}
      	}
      });
	});
	$('#range_number').on('change', function() {
		set_interpolation_ranges();
	});
	set_interpolation_ranges();
}).modal();

// Cierra dropdown
$('#gis_dropdown').dropdown('toggle');

function set_interpolation_ranges(){
	$('#interpolation_range').empty();
	var num_ranges = $('#range_number').val();
	for(var i=0;i<num_ranges;i++){
		if(i<Math.ceil(num_ranges/2)){
			red = 1;
			if(i==0){
				green = 0;
			} else{
				green = (i+1)/Math.floor(num_ranges/2);
			}
		}
		if(i>Math.floor(num_ranges/2)){
			green = 1;
			if(i==num_ranges-1){
				red = 0;
			} else {
				red = (num_ranges-(i+1))/Math.floor(num_ranges/2);
			}
		}
		if((i+1)==Math.ceil(num_ranges/2)){
		//	green = 1;
		//	red = 1;
		}
		var rgb_color = "rgb("+Math.round(red*250)+","+Math.round(green*250)+",0)";
		var hex_color = rgb2hex(rgb_color); 
		var html_ranges = '<div class="d-flex">';
	    html_ranges+= '<input type="number" name="" id="intermin_'+i+'"  class = "intermin mt-3 form-control form-control-sm w-50 mr-3" >';
	    html_ranges+= '<input type="number" name="" id="intermax_'+i+'"  class = "intermax mt-3 form-control form-control-sm w-50 mr-3" >';
    	html_ranges+= '<input value="'+hex_color+'"  type="color" name="" id="intercolor_'+i+'" class = "intercolor mt-3 form-control form-control-sm" style="width:30px; padding:1px" ';
    	html_ranges+='</div>'
    $('#interpolation_range').append(html_ranges);
	}
}

function rgb2hex(rgb){
 rgb = rgb.match(/^rgba?[\s+]?\([\s+]?(\d+)[\s+]?,[\s+]?(\d+)[\s+]?,[\s+]?(\d+)[\s+]?/i);
 return (rgb && rgb.length === 4) ? "#" +
  ("0" + parseInt(rgb[1],10).toString(16)).slice(-2) +
  ("0" + parseInt(rgb[2],10).toString(16)).slice(-2) +
  ("0" + parseInt(rgb[3],10).toString(16)).slice(-2) : '';
}
