<div id="react-mapping-content" class='react-mapping-content'></div>

<% content_for :javascript do %>
  <script type='text/babel'>
    const { useMemo, useState, useCallback } = React;
    const App = ({ columnNames, projectFields, locale, projectType, projectMapping }) => {
      const [selectedColumnNames, setSelectedColumnNames] = useState({});
      const [selectedFields, setSelectedFields] = useState({});

      const selectedColumnNamesList = useMemo(() => Object.values(selectedColumnNames), [selectedColumnNames]);

      const availableColumnNames = useMemo(() => {
        return columnNames.filter(column => !selectedColumnNamesList.includes(column));
      }, [selectedColumnNamesList, columnNames]);

      const handleChange = useCallback(
        ({ target: { value, name } }) => {
          setSelectedColumnNames({ ...selectedColumnNames, [name]: value });
        },
        [selectedColumnNames]
      );

      const availableOptionsKey = useCallback(component => {
        return (
          [
            <option value=""></option>,
            ...columnNames.map(columnName => {
                const shouldBeHidden = selectedColumnNamesList.includes(columnName);
                return <option value={columnName} className={shouldBeHidden && 'select__option--hidden'}>{columnName}</option>
              })
          ]

        )
      }, [columnNames, selectedColumnNamesList]);

      const handleChangeField = useCallback(
        ({ target: { name, value } }) => {
          setSelectedFields({ ...selectedFields, [name]: value });
        },
        [selectedFields]
      );

      const availableOptions = useCallback(component => {
        return (
          [
            <option value=""></option>,
            ...projectMapping.map(projectField => {
                const shouldBeHidden = Object.values(selectedFields).includes(projectField[0]) && selectedFields[component] !== projectField[0]
                return <option value={projectField[0]} className={shouldBeHidden && 'select__option--hidden'}>{projectField[1]}</option>
              })
          ]

        )
      }, [projectMapping, selectedFields]);

      const removeColumnName = useCallback(
        columnName => () => {
          setSelectedColumnNames({ ...selectedColumnNames, [columnName]: columnName });
        },
        [selectedColumnNames]
      )

      return (
      <div className="container-fluid">
        <div className="card m-2 shadow">
          <div className="card-body p-3">
            <div className="row justify-content-center">
              <h2 className="mx-0">Importación de registros</h2>
            </div>
          </div>
        </div>
        <div className="card m-2 shadow">
          <div className="card-body" >
            <div className="">
              <form className="" action="<%= project_type_projects_import_path(@project_type) %>" method="post" id="form_data_children_import">
                <div className="">
                  <div className="row my-2">
                    <div className="col-md-6 text-right">
                      <h4 className="">Archivo GEOJson</h4>
                    </div>
                    <div className="col-md-6 text-left">
                      <h4 className=""><%= "Datos de " + @project_type.name %></h4>
                    </div>
                  </div>
                  <div className="row my-1">
                    <div className="col-md-6 text-right">
                      <label class="col-md-8 text-right col-form-label py-0">Atributo fecha</label>
                      <select className="select col-md-4 form-control form-control-sm" name="mapping[gwm_created_at]" onChange={handleChange} style={{display:'inline'}}>
                          {availableOptionsKey('gwm_created_at')}
                      </select>
                    </div>
                      <label class="col-md-6 col-form-label font-italic py-0"><i class="fas fa-exclamation-circle"></i> En blanco para tomar fecha actual</label>
                  </div>
                  <div className="row my-1">
                    <div className="col-md-6 text-right">
                      <label class="col-md-8 text-right col-form-label py-0">Formato Fecha</label>
                      <select className=" select col-md-4 form-control form-control-sm" name="mapping[gwm_created_at_format]" style={{display:'inline'}}>
                        <option value="%Y-%m-%d">YYYY-MM-DD</option>
                        <option value="%d-%m-%Y">DD-MM-YYYY</option>
                        <option value="%m-%d-%Y">MM-DD-YYYY</option>
                      </select>
                    </div>
                  </div>
                  <div className="row my-1">
                    <div className="col-md-6 text-right">
                      <label class="col-md-8 text-right col-form-label py-0">Atributo Id Usuario</label>
                      <select className="select col-md-4 form-control form-control-sm" name="mapping[user_id]" onChange={handleChange} style={{display:'inline'}}>
                          {availableOptionsKey('user_id')}
                      </select>
                    </div>
                      <label class="col-md-6 col-form-label font-italic py-0"><i class="fas fa-exclamation-circle"></i> En blanco para tomar usuario logueado</label>
                  </div>
                  <div className="row my-1">
                    <div className="col-md-6 text-right">
                      <label class="col-md-8 text-right col-form-label py-0">Atributo Id Estado</label>
                      <select className="select col-md-4 form-control form-control-sm" name="mapping[state_id]" onChange={handleChange} style={{display:'inline'}}>
                          {availableOptionsKey('state_id')}
                      </select>
                    </div>
                      <label class="col-md-6 col-form-label font-italic py-0"><i class="fas fa-exclamation-circle"></i> En blanco para estado por default</label>
                  </div>
                  <div className="row my-1">
                    <div className="col-md-6 text-right">
                    </div>
                      <label class="col-md-6 col-form-label font-italic py-0"><i class="fas fa-exclamation-circle"></i> Las campos que queden vacíos no se importarán</label>
                  </div>
                </div>

                  <div className="">
                    {availableColumnNames.map(columnName => {
                      return (
                        <div className="" key={columnName}>
                          <div className="row my-1">
                            <div className="col-md-6 text-right">
                              <label
                                for={`mapping[properties][${columnName}]`}
                                className="react-mapping-content__data-children__attribute__name"
                              >
                              {columnName}
                              </label>
                            </div>
                            <div className="col-md-6 text-left">
                              <div className="row">
                                <select className="select col-md-4 form-control form-control-sm" name={`mapping[properties][${columnName}]`} onChange={handleChangeField} style={{display:'inline'}}>
                                  {availableOptions(`mapping[properties][${columnName}]`)}
                                </select>
                                <div class="col-md-1">
                                  <a class="" href="#" name="button" onClick={removeColumnName(columnName)}>
                                    <i class="fas fa-trash-alt" title="Eliminar columna"></i>
                                  </a>
                                </div>
                              </div>
                            </div>
                          </div>
                        </div>
                      )
                    })}
                  </div>
                  <div className="row justify-content-center pt-1 my-4">
                    <div className="react-mapping-content__actions">
                      <a
                        href={`/${locale}/project_types/${projectType.id}/projects/import/new`}
                        className="btn btn-secondary mr-1"
                      >
                        Cancelar
                      </a>
                      <button type="submit" className="enviar btn btn-primary" form="form_data_children_import">Importar</button>
                  </div>
                </div>
              </form>
            </div>
          </div>
        </div>
      </div>
      )
    }

    const columnNames = <%= raw @file_headers.to_json %>;
    const locale = "<%= @locale %>";
    const projectType = <%= raw @project_type.to_json %>;
    const projectMapping = <%= raw @project_mapping.to_json %>;

    ReactDOM.render(
      <App
        columnNames={columnNames}
        locale={locale}
        projectType={projectType}
        projectMapping={projectMapping}
      />,
      document.querySelector('#react-mapping-content')
    );
  </script>
<% end %>
