var xhr_heatmap = null;
var xhr_namelayer = null;
var xhr_layer_external = null;
var xhr_popup = null;
var xhr_field_type = null;
var project_type_layers = [];
var wmsLayer;
var div_popup_icon;
var number_point_value;
var multipoints_coordinates;
var ndvi_event;
var multipoints_event;
var pdf_event;

Navarra.namespace("geomaps");
var first_layer=false;
var layer_array=[];
var labels;
var app_id_popup="";
var geometries_to_edit = [];
var geometries_to_save;
var polygon_edit_vertexs =[];
var id_for_split;
Navarra.geomaps = function() {
  var mymap, markers,polygon_edit,polyline_edit, polygon_selected, editableLayers, projects, layerProjects, layerProjectsSelected, MySource, cfg, heatmapLayer, current_tenant, popUpDiv, div, layerControl, url, protocol, port, type_geometry;
  var layerColor, source, baseMaps, overlayMaps, projectFilterLayer, projectss, sld, name_layer, project_current,project_current_selected,current_tenement;
  var ss = [];
  var size_box = [];
  var myLocalStorage = window.localStorage;
  var last_lat = 0;
  var last_long = 0;
  var inn = ""
  var first_time_internal_layers = true;
  var geojson_color_attr;

  var isobands_layer;

  var init = function() {
    // trae datos de capas
    $.ajax({
      type: 'GET',
      url: '/project_types/project_type_layers.json',
      datatype: 'json',
      data: {
        current_layer: Navarra.dashboards.config.name_layer
      },
      success: function(data) {
        project_type_layers = data;
        layers_internal();

        if (Navarra.dashboards.config.current_tenant == 'impulsa' && Navarra.dashboards.config.name_layer == 'distritito_minero_occidental_malargue' && Navarra.dashboards.config.user_name == 'Usuario publico') {
          $('#layersDropdown').click();
        }

        $('div[id^="div_layer_"]').each(function() {
      		var divId = $(this).attr('id');
          var prefix = "div_layer_";
          var layerId = divId.replace(prefix, "");
      		var savedState = localStorage.getItem(layerId);

          if (savedState === 'hidden') {
            $(this).addClass('d-none');
          }
      	});
      } // Cierra success
    }) // Cierra ajax

    //crea nodo para popup
    var z = document.createElement('DIV'); // is a node
    z.id = "popup_created";
    document.body.appendChild(z);
    //fin nodo

    url = window.location.hostname;
    protocol = window.location.protocol;
    if (protocol == 'https:') {
      port = 443
    } else {
      port = 8600
    }

    var streetsGmaps = L.tileLayer('https://mt1.google.com/vt/lyrs=r&x={x}&y={y}&z={z}', {
      updateWhenIdle: true,
      reuseTiles: true,
      maxZoom: 20,
      maxNativeZoom: 18
    });

    var OsmStreets = L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
      attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
      updateWhenIdle: true,
      reuseTiles: true,
      maxZoom: 20,
      maxNativeZoom: 18
    });

    var grayscale = L.tileLayer('https://api.mapbox.com/styles/v1/{id}/tiles/{z}/{x}/{y}?access_token={accessToken}', {
      attribution: '',
      id: 'mapbox/light-v10',
      accessToken: 'pk.eyJ1IjoiZ2lzd29ya2luZ21hcCIsImEiOiJja21lenQ3bG0zMGg4MndvamtrNjdhbzl4In0.sxBssnfTVHWdklOJDZsIjA',
      updateWhenIdle: true,
      reuseTiles: true,
      maxZoom: 20,
      maxNativeZoom: 18
    });

    var satellite = L.tileLayer('https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}', {
      attribution: 'Tiles &copy; Esri &mdash; Source: Esri, i-cubed, USDA, USGS, AEX, GeoEye, Getmapping, Aerogrid, IGN, IGP, UPR-EGP, and the GIS User Community',
      maxZoom: 20,
      maxNativeZoom: 18
    });

    var CartoDB_DarkMatter = L.tileLayer('https://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}{r}.png', {
      attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors &copy; <a href="https://carto.com/attributions">CARTO</a>',
      subdomains: 'abcd',
      maxZoom: 20,
      maxNativeZoom: 19
    });

    var googleSat = L.tileLayer('http://{s}.google.com/vt/lyrs=s&x={x}&y={y}&z={z}',{
      maxZoom: 20,
      maxNativeZoom: 19,
      subdomains:['mt0','mt1','mt2','mt3']
    });

    var hybgooglemap = L.tileLayer('https://mt1.google.com/vt/lyrs=y&x={x}&y={y}&z={z}',{
      updateWhenIdle: true,
      reuseTiles: true,
      maxZoom: 20,
      maxNativeZoom: 19,
      subdomains:['mt0','mt1','mt2','mt3']
    });

    cfg = {
      "radius": 30,
      "maxOpacity": .8,
      "scaleRadius": false,
      "useLocalExtrema": true,
      latField: 'lat',
      lngField: 'lng',
      valueField: 'count'
    };

    var last_zoom= myLocalStorage.getItem('zoom');
    var last_latitude= myLocalStorage.getItem('latitude');
    var last_longitude= myLocalStorage.getItem('longitude');
    if(last_zoom==null){last_zoom=12}
    if(last_latitude==null){last_latitude=-33.113399134183744}
    if(last_longitude==null){last_longitude=-69.69339599609376}
    mymap = L.map('map', {
      fadeAnimation: true,
      markerZoomAnimation: true,
      zoom: last_zoom,
      center: [last_latitude, last_longitude],
      zoomControl: false,
      zoomAnimation: true,
      layers: [streetsGmaps],
      zoomSnap: 0.25,
      zoomDelta: 0.5,
      wheelPxPerZoomLevel: 200
    });

    type_geometry = Navarra.dashboards.config.type_geometry;
    minx = Navarra.dashboards.config.minx;
    miny = Navarra.dashboards.config.miny;
    maxx = Navarra.dashboards.config.maxx;
    maxy = Navarra.dashboards.config.maxy;

    // Sino existe un proyecto hace zoom a la posición del dispositivo
    if (type_geometry == '') {
      mymap.locate({
        setView: true,
        maxZoom: 13
      });
    }

    if(myLocalStorage.getItem('zoom')==null){
      mymap.fitBounds([
        [miny, minx],
        [maxy, maxx]
      ]);
    }

    baseMaps = {
      "Google Maps Calles": streetsGmaps,
      "Google Maps Híbrido": hybgooglemap,
      "Google Maps Satelital": googleSat,
      "OSM Calles": OsmStreets,
      "OSM Satelital": satellite,
      "Claro": grayscale,
      "Oscuro": CartoDB_DarkMatter
    };

    //genera Modal de mapas base y proyecto activo
    Object.keys(baseMaps).forEach(function(key,index){
      if(index==0){var checked_text ="checked=true"} else {checked_text=""}
      var new_item = '<a class="dropdown-item" href="#"><div class="custom-control custom-checkbox" >'+
                    '<input class="custom-control-input" '+checked_text +' onchange="select_layer()" id="mapabase_'+key+'" type="radio" name="radio_mapabase">'+
                    '<label class="string optional control-label custom-control-label" for="mapabase_'+key+'"> </label>'+
                    '</div>'+
                    '<label for=mapa_base1>'+key+'</label></a>';
        $('#basemaps_container').append(new_item);
      });
      var new_item = '<a class="dropdown-item" href="#"><div class="custom-control custom-switch">'+
                '<input type="checkbox" id="switch_intersect_layers" class="custom-control-input " onchange="Navarra.geomaps.intersect_layers()">'+
                '<label id="switch_intersect_layers" class="custom-control-label custom-role-colour" for="switch_intersect_layers">Interceptar con Otras Capas</label>'+
                '</div></a>';
      $('#activeproject_container').append(new_item);
      var new_item = '<a class="dropdown-item" href="#"><div class="custom-control custom-checkbox" >'+
                    '<input class="custom-control-input" checked=true onchange="select_layer()" id="checkbox_'+Navarra.dashboards.config.name_layer+'" type="checkbox" name="radio_mapabase">'+
                    '<label class="string optional control-label custom-control-label" for="checkbox_'+Navarra.dashboards.config.name_layer+'"> </label>'+
                    '</div>'+
                    '<label for=mapa_base1>'+Navarra.dashboards.config.name_project+'</label></a>';
      $('#activeproject_container').append(new_item);
      var new_item = '<a class="dropdown-item" href="#" id="checkbox_div_Seleccionados"><div class="custom-control custom-checkbox" >'+
                    '<input class="custom-control-input" onchange="select_layer()" id="checkbox_Seleccionados" type="checkbox" name="radio_mapabase">'+
                    '<label class="string optional control-label custom-control-label" for="checkbox_Seleccionados"> </label>'+
                    '</div>'+
                    '<label for=mapa_base1>Seleccionados</label></a>';
      $('#activeproject_container').append(new_item);
      var new_item = '<a class="dropdown-item" href="#" id="checkbox_div_Etiquetas"><div class="custom-control custom-checkbox" >'+
                    '<input class="custom-control-input" onchange="Navarra.geomaps.show_labels(true)" id="checkbox_Etiquetas" type="checkbox" name="radio_mapabase">'+
                    '<label class="string optional control-label custom-control-label" for="checkbox_Etiquetas"> </label>'+
                    '</div>'+
                    '<label for=mapa_base1>Etiquetas Formularios</label></a>';
      $('#activeproject_container').append(new_item);
      var new_item = '<a class="dropdown-item" href="#" id="checkbox_div_etiquetas_subforms">' +
                    '<i class="fas fa-chevron-down float-right" id="subforms_labels_dropdown" style="margin-left:-20px" onclick="Navarra.geomaps.show_prefilters_subform_labels()"></i>' +
                    '<label for="mapa_base1">Etiquetas Subformularios</label>' +
                    '</a>' +
                    '<div class="empty-container pl-4 d-none" style="width:20vw" id="empty_container">' +
                    	'<div class="custom-control custom-switch" id="prefilters_labels_to_show">'+
                    	'</div>'+
                    '</div>';
      $('#activeproject_container').append(new_item);
    // termina modal mapa base y proyecto activo

    var overlays = {};

    layerControl = L.control.layers(baseMaps, overlays, {
      position: 'topleft',
      collapsed: true
    }).addTo(mymap);

    const searchControl = new GeoSearch.GeoSearchControl({
      provider: new GeoSearch.OpenStreetMapProvider(),
      style: 'button',
      showMarker: true,
      autoClose: false,
      searchLabel: 'Buscar dirección...',
      keepResult: true,
      notFoundMessage: "Dirección no encontrada",
      showPopup: false,
      popupFormat: ({ result }) => {
        console.log(result)
        return `${result.label}`;
      },
      updateMap: true
    });

    <%# function formatAddress(label) {
      const addressParts = label.split(',').map(part => part.trim());
      console.log(addressParts)
      if (addressParts.length < 3) {
        return label;
      }

      let numero = addressParts[0].match(/\d+/)?.[0] || '';  // Extrae el número si existe
      let calle = addressParts[0].replace(/\d+/, '').trim(); // Extrae la calle eliminando el número
      let ciudad = addressParts[2];                          // Ciudad
      let provincia = addressParts[6] || addressParts[5];    // Provincia (varía en algunos casos)

      return `${calle} ${numero}, ${ciudad}, ${provincia}`.trim();
    } %>


    mymap.addControl(searchControl);

    // Agrega el zoom al mapa
    L.control.zoom({
      position: 'topright'
    }).addTo(mymap);

    //agrega boton zoomextend
    L.Control.ZoomExtend = L.Control.extend({
      onAdd: function(map) {
        var container = L.DomUtil.create('DIV');
        container.className = "leaflet-control-zoom leaflet-bar leaflet-control";
        var new_a = L.DomUtil.create('A');
        new_a.className = "leaflet-draw-draw-polygon";
        new_a.title = "Mostrar Todo"
        var img = L.DomUtil.create('I');
        img.className = 'fas fa-expand-arrows-alt';
        img.style.color = "#EBEBEC";
        img.style.cursor = "pointer"
        img.style.textShadow = "1px 1px 2px rgba(0,0,0,0.5)"
        new_a.appendChild(img)
        container.appendChild(new_a);

        onClick = function(event) {
          get_zoomextent();
        };
        L.DomEvent.addListener(container, 'click', onClick, this);

        return container;
      },
    });

    L.control.ZoomExtend = function(opts) {
      return new L.Control.ZoomExtend(opts);
    }
    L.control.ZoomExtend({ position: 'topright' }).addTo(mymap);

    editableLayers = new L.FeatureGroup();
    mymap.addLayer(editableLayers);
    var drawControl = new L.Control.Draw({
      position: 'topright',
      draw: {
        polygon: {
          shapeOptions: {
            color: '#d3d800',
          }
        },
        rectangle: {
          shapeOptions: {
            color: '#d3d800'
          }
        },
        polyline: false,
        circle: false,
        marker: false
      },
      edit: {
        featureGroup: editableLayers,
        edit: false,
        remove: true
      }
    });
    L.drawLocal = {
      draw: {
        toolbar: {
          actions: {
            title: 'Cancelar',
            text: ''
          },
          finish: {
            title: 'Finish drawing',
            text: 'Finalizar'
          },
          undo: {
            title: 'Delete last point drawn',
            text: 'Eliminar el último punto'
          },
          buttons: {
            polygon: 'Polígono',
            rectangle: 'Rectángulo',
          }
        },
        handlers: {
          circle: {
            tooltip: {
              start: 'Haga click en el mapa y arrastre para dibujar un círculo.'
            },
            radius: 'Radio'
          },
          polygon: {
            tooltip: {
              start: 'Haga click para comenzar a dibujar el polígono.',
              cont: 'Haga click para continuar dibujando el polígono.',
              end: 'Haga click en el primer punto para cerrar este polígono.'
            }
          },
          polyline: {
            error: '<strong>Error:</strong> los bordes del polígono no pueden cruzarse.',
            tooltip: {
              start: 'Click to start drawing line.',
              cont: 'Click to continue drawing line.',
              end: 'Click last point to finish line.'
            }
          },
          rectangle: {
            tooltip: {
              start: 'Haga click en el mapa y arrastre para dibujar un rectángulo.'
            }
          },
          simpleshape: {
            tooltip: {
              end: 'Suelte el mouse para terminar de dibujar.'
            }
          }
        }
      },
      edit: {
        toolbar: {
          actions: {
            save: {
              title: 'Aplicar cambios',
              text: 'Aplicar'
            },
            cancel: {
              title: 'Cancelar cambios',
              text: 'Cancelar'
            },
            clearAll: {
              title: 'Clear all layers',
              text: 'Limpiar todo'
            }
          },
          buttons: {
            edit: 'Editar',
            editDisabled: 'Nada para editar',
            remove: 'Eliminar',
            removeDisabled: 'Nada para eliminar'
          }
        },
        handlers: {
          edit: {
            tooltip: {
              text: 'Drag handles or markers to edit features.',
              subtext: 'Click cancel to undo changes.'
            }
          },
          remove: {
            tooltip: {
              text: "",
            }
          }
        }
      }
    };
    mymap.addControl(drawControl);

    // Cambia los íconos de Leafleat que se ven corridos
    var img_polygon = L.DomUtil.create('I');
    img_polygon.className = 'fas fa-draw-polygon';
    img_polygon.style.color = "#EBEBEC";
    img_polygon.style.cursor = "pointer"
    img_polygon.style.textShadow = "1px 1px 2px rgba(0,0,0,0.5)"
    $('.leaflet-draw').children().first().children().first().removeClass('leaflet-draw-toolbar leaflet-bar leaflet-draw-toolbar-top');
    $('.leaflet-draw').children().first().children().first().addClass('leaflet-control-zoom leaflet-bar leaflet-control mt-0');
    $('.leaflet-draw').children().first().children().first().children().first().append(img_polygon)

    var img_polygon = L.DomUtil.create('I');
    img_polygon.className = 'fas fa-vector-square';
    img_polygon.style.color = "#EBEBEC";
    img_polygon.style.cursor = "pointer"
    img_polygon.style.textShadow = "1px 1px 2px rgba(0,0,0,0.5)"
    $('.leaflet-draw').children().first().children().first().removeClass('leaflet-draw-toolbar leaflet-bar leaflet-draw-toolbar-top');
    $('.leaflet-draw').children().first().children().first().addClass('leaflet-control-zoom leaflet-bar leaflet-control mt-0');
    $('.leaflet-draw').children().first().children().first().children().first().next().append(img_polygon)

    // Elimina la opción "Eliminar último punto" del toolbar
    $('.leaflet-draw-draw-polygon').on('click', function() {
      $('.leaflet-draw-actions > li:nth-child(1) > a').remove()
    });

    // Deshabilita los botones Círculo y Marker del toolbar
    $('.leaflet-draw-draw-circle').addClass('unselectable')
    $('.leaflet-draw-draw-marker').addClass('unselectable')

    //agrega boton EdiciónGeográfica si tiene permiso de edición geométrica o permiso de nuevo
    // AGREGAR PERMISO DE NUEVO REGISTRO
    if($('#edit_geom_control').val()=="true" || $('#new_geom_control').val()=="true"){
      L.Control.Edit = L.Control.extend({
        onAdd: function(map) {
          var container = L.DomUtil.create('DIV');
          container.className = "leaflet-control-zoom leaflet-bar leaflet-control";
          // botón edición
          if($('#edit_geom_control').val()=="true"){
            var new_a = L.DomUtil.create('A');
            new_a.className = "leaflet-draw-draw-polygon";
            new_a.title = "Editar Geometrías"
            var img = L.DomUtil.create('I');
            img.className = 'fas fa-edit';
            img.style.color = "#EBEBEC";
            img.style.cursor = "pointer"
            img.style.textShadow = "1px 1px 2px rgba(0,0,0,0.5)"
            new_a.appendChild(img);
            new_a.setAttribute('onclick','Navarra.geomaps.edit_geometry_in_map(event)')
            container.appendChild(new_a);
          }

          // botón creación
          if($('#new_geom_control').val()=="true"){
            var new_a = L.DomUtil.create('A');
            new_a.className = "leaflet-draw-draw-polygon";
            new_a.title = "Nueva Geometría";
            var img = L.DomUtil.create('I');
            img.className = 'fas fa-map-marker-alt';
            img.style.color = "#EBEBEC";
            img.style.cursor = "pointer"
            img.style.textShadow = "1px 1px 2px rgba(0,0,0,0.5)"
            new_a.appendChild(img);
            new_a.setAttribute('onclick','Navarra.geomaps.new_geometry(event)')
            container.appendChild(new_a);
          }

          var new_div = L.DomUtil.create('DIV');
          new_div.className = "confirmation_geometry d-none"

          if(type_geometry == 'LineString') {
            var new_div_split = L.DomUtil.create('DIV');
            new_div_split.id = "div_split_line"
            var new_p = L.DomUtil.create('DIV');
            new_p.className = "custom-control custom-checkbox"
            var new_p1 = L.DomUtil.create('INPUT');
            new_p1.className = "custom-control-input";
            new_p1.type = "checkbox";
            new_p1.id = "checkbox_split_line";
            new_p.appendChild(new_p1);
            var new_p1 = L.DomUtil.create('LABEL');
            new_p1.className = "string optional control-label custom-control-label";
            new_p1.setAttribute("for","checkbox_split_line");
            new_p.appendChild(new_p1);
            new_div_split.appendChild(new_p);
            var new_p = L.DomUtil.create('P');
            new_p.innerHTML = "Separar Segmentos";
            new_p.className = "d-inline m-0"
            new_p.style.whiteSpace='nowrap';
            new_div_split.appendChild(new_p);
            new_div.appendChild(new_div_split);
          }

          var new_p = L.DomUtil.create('P');
          new_p.innerHTML = "Confirmar Geometría?";
          new_p.style.whiteSpace='nowrap';
          new_p.style.margin = '0px'
          new_div.appendChild(new_p);

          var new_a = L.DomUtil.create('BUTTON');
          new_a.className = "btn btn-primary p-0 m-1";
          new_a.innerHTML = "SI";
          new_a.id = "confirmation_geometry_button";
          new_a.type="button";
          new_a.style.width = '35px';
          new_a.setAttribute('onClick','Navarra.geomaps.save_geometry()');
          new_div.appendChild(new_a);

          var new_a = L.DomUtil.create('BUTTON');
          new_a.className = "btn btn-secondary p-0";
          new_a.innerHTML = "NO";
          new_a.type="button";
          new_a.style.width = '35px';
          new_a.setAttribute('onClick','Navarra.geomaps.cancel_geometry(event)');
          new_div.appendChild(new_a);

          var new_p = document.createElement('P');
          new_p.id = "marker_position";
          new_p.className="m-0";
          new_div.appendChild(new_p);
          container.appendChild(new_div);

          var new_div = L.DomUtil.create('DIV');
          new_div.className = "confirmation_success_geometry d-none";
          var new_i = L.DomUtil.create('I');
          new_i.className='fas fa-times close-leaflet';
          new_i.setAttribute('onclick', 'Navarra.geomaps.close_success_message_geometry()');
          new_div.appendChild(new_i);
          var new_p = L.DomUtil.create('P');
          new_p.style.margin='10px 0px 0px 0px';
          new_p.id="confirmation_success_geometry_text"
          new_div.appendChild(new_p);
          container.appendChild(new_div);


          return container;
        },
      });

      L.control.Edit= function(opts) {
        return new L.Control.Edit(opts);
      }
      L.control.Edit({ position: 'topright' }).addTo(mymap);
    }

    L.control.measure().addTo(mymap);
    var measureAction = new L.MeasureAction(mymap, {
        model: "distance",
    });

    // Agrega la escala al mapa
    L.control.scale({
      imperial: false,
      position: 'bottomleft',
    }).addTo(mymap);

    popup();
    current_tenant = Navarra.dashboards.config.current_tenant;
    current_layer();
    layers_external();
    // show_kpis();
    show_default_kpis();
    init_time_slider();

    mymap.on('moveend', onMapZoomedMoved);

    //Borra polígono dibujado si hace click fuera del mapa
    set_onclick_map(true);

    //elimina la variable app_id_popup al cerrar el popup
    mymap.on('popupclose', function(e) {
      app_id_popup="";
      if(polygon_selected!=undefined){
        mymap.removeLayer(polygon_selected);
      }
    });


    mymap.on('draw:drawstart', function(e) {
      Navarra.dashboards.config.draw_disabled = false;
      editableLayers.eachLayer(function(layer) {
        editableLayers.removeLayer(layer);
      })
      const btn_cl = window.document.querySelector('.leaflet-draw-actions li:last-child a');
      btn_cl.addEventListener('click', function(e) {
        Navarra.dashboards.config.draw_disabled = true;
        Navarra.dashboards.config.size_box = mymap.getBounds();
        Navarra.dashboards.config.size_polygon = [];
        init_data_dashboard(true);
        init_kpi();
        init_chart_doughnut();
      });
    })

    mymap.on('draw:created', function(e) {
      size_box = [];
      var arr1 = []
      var type = e.layerType,
        layer = e.layer;
      polygon = layer.getLatLngs();
      editableLayers.addLayer(layer);
      arr1 = LatLngsToCoords(polygon[0]);
      arr1.push(arr1[0])
      size_box.push(arr1);
      Navarra.dashboards.config.size_polygon.push(arr1);
      show_data_dashboard();
      show_kpis()
      var heatmap_actived = Navarra.project_types.config.heatmap_field;
      if (heatmap_actived != '') {
        Navarra.geomaps.heatmap_data();
      }
      Navarra.dashboards.config.draw_disabled = true;

    });


    // Desactiva el popup mientras se elimina la selección por polígono
    mymap.on('draw:deletestart', function(e) {
      // oculta el boton delete
      remove_polygon_draw();
    })


  } // end function init

  function remove_polygon_draw(){
      Navarra.dashboards.config.draw_disabled = false;
      editableLayers.eachLayer(function(layer) {
        editableLayers.removeLayer(layer);
      })
      Navarra.dashboards.config.size_box = mymap.getBounds();
      Navarra.dashboards.config.size_polygon = [];
      Navarra.dashboards.config.draw_disabled = true;
      size_box = [];
      init_data_dashboard(true);
      init_kpi();
      init_chart_doughnut();
      var heatmap_actived = Navarra.project_types.config.heatmap_field;
      if (heatmap_actived != '') {
        Navarra.geomaps.heatmap_data();
      }
  }
  function BoundingBox() {
    var bounds = mymap.getBounds().getSouthWest().lng + "," + mymap.getBounds().getSouthWest().lat + "," + mymap.getBounds().getNorthEast().lng + "," + mymap.getBounds().getNorthEast().lat;
    return bounds;
  }


  function show_kpis() {
    if (Navarra.dashboards.config.size_polygon.length == 0) {
      Navarra.dashboards.config.size_box = mymap.getBounds();
      init_kpi();
      init_chart_doughnut();
    } else {
      size_polygon = Navarra.dashboards.config.size_polygon;
      init_kpi(size_polygon);
      init_chart_doughnut(size_polygon);
    }
  }

  function show_default_kpis() {
    Navarra.dashboards.config.size_box = mymap.getBounds();
    default_kpis = true
    init_kpi(null, default_kpis);
    init_chart_doughnut();
  }

  function show_data_dashboard() {
      Navarra.dashboards.config.size_box = mymap.getBounds();
      init_data_dashboard(true);
  }


  var LatLngToCoords = function(LatLng, reverse) { // (LatLng, Boolean) -> Array
    var lat = parseFloat(LatLng.lat),
      lng = parseFloat(LatLng.lng);
    return [lng, lat];
  }


  var LatLngsToCoords = function(LatLngs, levelsDeep, reverse) { // (LatLngs, Number, Boolean) -> Array

    var i, len;
    var coords = [];

    for (i = 0, len = LatLngs.length; i < len; i++) {
      coord = LatLngToCoords(LatLngs[i]);
      coords.push(coord);
    }
    return coords;
  }


  function onMapZoomedMoved(e) {
    myLocalStorage.setItem('zoom', mymap.getZoom());
    myLocalStorage.setItem('latitude', mymap.getCenter().lat);
    myLocalStorage.setItem('longitude', mymap.getCenter().lng);
    checked = Navarra.dashboards.config.draw_disabled;
    if (checked) {
      show_data_dashboard();
      hidde_sidebar('charts-container');
      show_default_kpis();
    }
  }


  function wms_filter(is_from_internal_layers) {
    var cql_filter = getCQLFilter(false);
    var heatmap_actived = Navarra.project_types.config.heatmap_field;
    if (heatmap_actived != '') {
      Navarra.geomaps.heatmap_data();
    }

    style = Navarra.geomap_tools.get_style_geoserver(type_geometry);
    mymap.removeLayer(project_current);
    mymap.removeLayer(project_current_selected);
    if (typeof(projectss) !== 'undefined') {
      mymap.removeLayer(projectss);
    }
    current_tenement = Navarra.dashboards.config.current_tenement;
    layer_current = current_tenement + ":" + name_layer;
    projectFilterLayer = new MySource(protocol + "//" + url + ":" + port + "/geoserver/"+current_tenement+"/wms?authkey="+Navarra.dashboards.config.geo_key+"", {
      layers: layer_current, //nombre de la capa (ver get capabilities)
      format: 'image/png',
      transparent: 'true',
      opacity: 1,
      version: '1.0.0', //wms version (ver get capabilities)
      tiled: true,
      maxZoom: 20,
      styles: style,
      INFO_FORMAT: 'application/json',
      format_options: 'callback:getJson',
      CQL_FILTER: cql_filter
    })

    projectss = projectFilterLayer.getLayer(layer_current).addTo(mymap);
    // actualiza datos y mapa init_data y show_kpi los ejecuta solo si elo mapa no se mueve
    //show_kpis();
    //show_data_dashboard();
    //recalcula las capas internas
    Navarra.project_types.config.current_layer_filters = cql_filter;
    if(!is_from_internal_layers){
      layers_internal();
    }
    // espera unos segundos para que el mapa se acomode
    show_labels(false);
  }

  function getCQLFilter(set_bbox, is_new_version){
    var cql_filter = 'project_type_id = ' + Navarra.dashboards.config.project_type_id;

    // Aplica filtros por hijos generados por el usuario
    var filtered_form_ids = Navarra.project_types.config.filtered_form_ids;
    if (filtered_form_ids.length > 0) {
      let final_array = [];
      for (var i = 0; i < filtered_form_ids.length; i++) {
        let ids_array = filtered_form_ids[i]
        if (final_array.length) {
          final_array = final_array.filter(value => ids_array.includes(value));
        } else {
          final_array = ids_array
        }
      }
      final_array = final_array.toString()
      cql_filter += ' and app_id IN (' + final_array + ')';
    }

    // Aplica filtro owner
    var owner = Navarra.project_types.config.owner;
    if (owner == true) {
      var user_name = Navarra.dashboards.config.user_name;
      cql_filter += " and app_usuario='" + user_name + "'";
    }

    // Aplica filtro intercapa
    var cross_layer_filter = Navarra.project_types.config.cross_layer_filter;
    var cross_layer_owner = Navarra.project_types.config.cross_layer_owner;
    if (cross_layer_filter.length > 0 || cross_layer_owner == true) {
      let cl_name = Navarra.project_types.config.cross_layer
      let cl_clasue = '1 = 1'

      // Aplica filtro intercapa por atributo
      if (cross_layer_filter.length > 0) {
        c_filter = cross_layer_filter[0].split('|');
        cl_clasue += " and " + c_filter[0] +" = ''" + c_filter[2] + "''"
      }

      // Aplica filtro intercapa por owner
      if (cross_layer_owner == true) {
        var user_name = Navarra.dashboards.config.user_name;
        cl_clasue += " and app_usuario = ''" + user_name + "''"
      }

      cql_filter += " and INTERSECTS(the_geom, collectGeometries(queryCollection('" + workspace + ':' + cl_name + "', 'the_geom', '" + cl_clasue + "')))"
    }

    // Aplica filtro de time_slider
    var from_date = Navarra.project_types.config.from_date;
    var to_date = Navarra.project_types.config.to_date;

    if (from_date != '' || to_date != '') {
      cql_filter += " AND (gwm_created_at BETWEEN '" + from_date + "' AND '" + to_date + "')"
    } else {
      cql_filter += ' AND row_enabled = true'
    }

    // Aplica filtro por atributo y filros padres generados por el usuario
    var attribute_filters = Navarra.project_types.config.attribute_filters;
    if (attribute_filters.length > 0) {
      $.each(attribute_filters, function(a, b) {
        data_filter = b.split('|');
        if(data_filter[3]==5 && data_filter[2]!='null' && data_filter[0] != 'app_estado' && data_filter[0] != 'app_usuario'){
          //!=null porque a los valores null los considera menores a
          cql_filter += " and parseDouble(" + data_filter[0] + ") " + data_filter[1] + " '" + data_filter[2] + "' and " + data_filter[0] + " IS NOT NULL";
        }
        else if(data_filter[3]==3 && data_filter[2]!='null'){
          //!=null porque a los valores null los considera menores a
          cql_filter += " and dateFormat('yyyy/MM/dd',dateParse('dd/MM/yyyy'," + data_filter[0] + ")) " + data_filter[1] + " dateFormat('yyyy/MM/dd',dateParse('dd/MM/yyyy','" + data_filter[2] + "')) and " + data_filter[0] + " IS NOT NULL";
        }
        else{
          cql_filter += " and " + data_filter[0] + " " + data_filter[1] + " '" + data_filter[2] + "'";
        }
      });
      cql_filter = cql_filter.replace(/!= 'null'/g, " IS NOT NULL ");
      cql_filter = cql_filter.replace(/= 'null'/g, " IS NULL ");
    }

    //Aplica filtro Intersect (definido por el usuario) con las capas activas
    if($('#switch_intersect_layers').is(":checked")){
      active_internal_layers = get_layers_checked();
      data_layer = project_type_layers;
      $.each(data_layer, function(lay, dat) {
        let layer_intersect = dat.layer
        let workspace = Navarra.dashboards.config.current_tenement;
        if(active_internal_layers.indexOf(dat.layer)>=0){
          var cql_filter_l = getCQLFilter_layer(dat);
          cql_filter_l = cql_filter_l.replace(/'/g,"''");
          cql_filter += " and INTERSECTS(the_geom, collectGeometries(queryCollection('" + workspace + ':' + layer_intersect + "', 'the_geom', '" + cql_filter_l + "')))";
        }
      });
    }
    if(set_bbox){
      var geometry_draw_array = Navarra.dashboards.config.size_polygon;
      if (geometry_draw_array.length == 0) {
        var size_ext = Navarra.dashboards.config.size_box;
        if (is_new_version) {
          var bbox_text = " AND BBOX(the_geom, "+size_ext['_southWest']['lat']+", "+size_ext['_southWest']['lng']+", "+size_ext['_northEast']['lat']+", "+size_ext['_northEast']['lng']+")";
        } else {
          var bbox_text = " AND BBOX(the_geom, "+size_ext['_southWest']['lng']+", "+size_ext['_southWest']['lat']+", "+size_ext['_northEast']['lng']+", "+size_ext['_northEast']['lat']+")";
        }
        cql_filter += bbox_text;
      } else{
        let geometry_draw = Navarra.geomap_tools.get_geometry_draw(geometry_draw_array);
        cql_filter += " and WITHIN(the_geom, " + geometry_draw + ")";
      }
  }
    return cql_filter;
  }

  // NOTE: La herramienta Colorear Puntos está descontinuada
  function point_colors_data() {

    field_point = Navarra.project_types.config.field_point_colors;
    data_point = Navarra.project_types.config.data_point_colors;
    var attribute_filters = Navarra.project_types.config.attribute_filters;

    if (field_point != '') {
      mymap.removeLayer(project_current);
      mymap.removeLayer(project_current_selected);

      if (ss.length > 0) {
        $.each(ss, function(id, layer) {
          mymap.removeLayer(layer);
        });
        mymap.removeControl(layerControl);
        layerControl = L.control.layers(baseMaps, overlayMaps, {
          position: 'topleft',
          collapsed: true
        }).addTo(mymap);
        ss = [];
      }

      if (typeof(projectss) !== 'undefined') {
        mymap.removeLayer(projectss);
      }

      var cql_project_type = 'project_type_id=' + Navarra.dashboards.config.project_type_id;
      $.each(data_point, function(a, b) {

        var cql_name = b['name'];

        var col;
        var value_filter = cql_project_type + " and " + field_point + "='" + cql_name + "' ";

        col = randomColor({
          format: 'hex'
        });

        // Aplica filtro por atributo y filros generados por el usuario
        if (attribute_filters != '') {
          $.each(attribute_filters, function(a, b) {
            data_filter = b.split('|');
            value_filter += " and " + data_filter[0] + data_filter[1] + data_filter[2];
          });
        }

        // Aplica filtro de time_slider
        var from_date = Navarra.project_types.config.from_date;
        var to_date = Navarra.project_types.config.to_date;
        if (from_date != '' || to_date != '') {
          cql_filter += " AND (gwm_created_at BETWEEN '" + from_date + "' AND '" + to_date + "')"
        } else {
          cql_filter += ' AND row_enabled = true'
        }

        var env_f = "color:" + col;
        current_tenement = Navarra.dashboards.config.current_tenement;
        layer_current = current_tenement + ":" + name_layer;

        var options = {
          layers: layer_current, //nombre de la capa (ver get capabilities)
          format: 'image/png',
          transparent: 'true',
          opacity: 1,
          maxZoom: 20,
          version: '1.0.0', //wms version (ver get capabilities)
          tiled: true,
          styles: 'scale2',
          env: env_f,
          INFO_FORMAT: 'application/json',
          format_options: 'callback:getJson',
          CQL_FILTER: value_filter
        };

        source = new L.tileLayer.betterWms(protocol + "//" + url + ":" + port + "/geoserver/"+current_tenement+"/wms?authkey="+Navarra.dashboards.config.geo_key+"", options);
        ss.push(source);

        // Elimina corchetes y comillas para leyenda
        if (cql_name !=  null) {
          cql_name = cql_name.replace(/[\[\]\"]/g, "")
        }

        var htmlLegend1and2 = L.control.htmllegend({
          position: 'bottomleft',
          legends: [{
            name: cql_name,
            layer: source,
            elements: [{
              label: '',
              html: '',
              style: {
                'background-color': col,
                'width': '10px',
                'height': '10px'
              }
            }]
          }],
          collapseSimple: true,
          detectStretched: true,
          collapsedOnInit: true,
          defaultOpacity: 1,
          visibleIcon: 'icon icon-eye',
          hiddenIcon: 'icon icon-eye-slash'
        })
        mymap.addControl(htmlLegend1and2)
        layerControl.addOverlay(source, cql_name);
        source.addTo(mymap);
      })
    } else {
      if (ss.length > 0) {
        $.each(ss, function(id, layer) {
          mymap.removeLayer(layer);
        });
        mymap.removeControl(layerControl);
        mymap.removeLayer(project_current);
        mymap.removeLayer(project_current_selected);
        layerControl = L.control.layers(baseMaps, overlayMaps, {
          position: 'topleft',
          collapsed: true
        }).addTo(mymap);

        if (attribute_filters.length == 0) {
          current_layer();
        }
        ss = [];
      }
    }
    show_kpis();
  }


  function heatmap_data() {

    var type_box = 'extent';
    size_box = Navarra.dashboards.config.size_polygon;
    var data_conditions = {}
    if (size_box.length > 0) {
      var type_box = 'polygon';
    } else {
      size_box = [];
      type_box = 'extent';
      size_ext = Navarra.dashboards.config.size_box;
      size_box[0] = size_ext['_southWest']['lng'];
      size_box[1] = size_ext['_southWest']['lat'];
      size_box[2] = size_ext['_northEast']['lng'];
      size_box[3] = size_ext['_northEast']['lat'];
    }
    var attribute_filters = Navarra.project_types.config.attribute_filters
    var data_id = Navarra.dashboards.config.project_type_id;
    var heatmap_field = Navarra.project_types.config.heatmap_field;
    var heatmap_indicator = Navarra.project_types.config.heatmap_indicator;
    var from_date = Navarra.project_types.config.from_date;
    var to_date = Navarra.project_types.config.to_date;
    var from_date_subforms = Navarra.project_types.config.from_date_subforms;
    var to_date_subforms = Navarra.project_types.config.to_date_subforms;
    var filtered_form_ids = Navarra.project_types.config.filtered_form_ids;
    var filter_children = [];
    var filter_user_children = [];
    var active_layers = get_active_layers();
    var intersect_width_layers = $('#switch_intersect_layers').is(":checked");
    var filters_layers = Navarra.project_types.config.filters_layers;
    var timeslider_layers = Navarra.project_types.config.timeslider_layers;
    $('.subform_filter').each(function(){
      if(!isNaN($(this).attr('id').split('|')[0])){
        filter_children.push($(this).attr('id'));
      }else {
        filter_user_children.push($(this).attr('id').split('|')[2])
      }
    });

    if(xhr_heatmap && xhr_heatmap.readyState != 4) {
      xhr_heatmap.abort();
    }
    xhr_heatmap = $.ajax({
      type: 'GET',
      url: '/project_types/filter_heatmap.json',
      datatype: 'json',
      data: {
        project_type_id: data_id,
        conditions: attribute_filters,
        heatmap_field: heatmap_field,
        size_box: size_box,
        type_box: type_box,
        heatmap_indicator: heatmap_indicator,
        from_date: from_date,
        to_date: to_date,
        from_subform: from_date_subforms,
        to_date_subform: to_date_subforms,
        filter_children: filter_children,
        filter_user_children: filter_user_children,
        active_layers: active_layers,
        filters_layers: filters_layers,
        intersect_width_layers: intersect_width_layers,
        timeslider_layers: timeslider_layers
      },
      success: function(data) {
        count_row = []
        $.each(data, function(a, b) {
          count_row.push(parseFloat(b['count']));
        })

        min = Math.min(...count_row);
        max = Math.max(...count_row);
        var legendCanvas = document.createElement('canvas');
        legendCanvas.width = 100;
        legendCanvas.height = 10;
        var legendCtx = legendCanvas.getContext('2d');
        var gradientCfg = {};
        var gradient = legendCtx.createLinearGradient(0, 0, 100, 1);

        gradient.addColorStop(0.25, "rgb(0,0,255)");
        gradient.addColorStop(0.55, "rgb(0,255,0)");
        gradient.addColorStop(0.85, "yellow");
        gradient.addColorStop(1, "rgb(255,0,0)");
        legendCtx.fillStyle = gradient;
        legendCtx.fillRect(0, 0, 100, 10);

        var populationLegend = L.control({
          position: 'bottomleft'
        });
        populationLegend.onAdd = function(mymap) {
          if ($('.info_legend').length) {
            $('.info_legend').remove();
          }
          var div = L.DomUtil.create('div', 'info_legend');
          div.innerHTML += '<div><span style="float: right">' + max + '</span><span style="float: left ">  ' + min + '</span>  </div>';
          div.innerHTML +=
            '<img src="' + legendCanvas.toDataURL() + '" alt="legend" width="125" height="25">';
          return div;
        };
        populationLegend.addTo(mymap);
        var testData;
        testData = {
          max: 5,
          data: data
        }

        if (typeof(heatmapLayer) !== 'undefined') {
          layerControl.removeLayer(heatmapLayer);
          mymap.removeLayer(heatmapLayer);
        }
        heatmapLayer = new HeatmapOverlay(cfg);
        heatmapLayer.setData(testData);

        //layerControl.addOverlay(heatmapLayer, "heatmap");
        mymap.addLayer(heatmapLayer);
      }
    })
  }


  function remove_heatmap() {
    if (typeof(heatmapLayer) !== 'undefined') {
      mymap.removeLayer(heatmapLayer);

      if ($('.info_legend').length) {
        $('.info_legend').remove();
      }
    }
  }


  function current_layer() {
    name_layer = Navarra.dashboards.config.name_layer;
    var labelLayer = Navarra.dashboards.config.name_layer;
    workspace = Navarra.dashboards.config.current_tenement;
    var cql_filter = getCQLFilter(false);

    // Asigna todos los filtros a una variable global
    Navarra.project_types.config.current_layer_filters = cql_filter;

    // Aplica filtro de elementos seleccionados en la tabla
    var cql_filter_data_not_selected = "";
    var cql_filter_data_selected = " and 1 = 2";
    var data_from_navarra = Navarra.project_types.config.data_dashboard;
    if (data_from_navarra != "") {
      cql_filter_data_not_selected = " and NOT (" + data_from_navarra + " )";
      cql_filter_data_selected = " and (" + data_from_navarra + " )";
      var geometry_draw_array = Navarra.dashboards.config.size_polygon;

      if (geometry_draw_array.length > 0) {
        geometry_draw = Navarra.geomap_tools.get_geometry_draw(geometry_draw_array);
        cql_filter_data_selected += " and WITHIN(the_geom, " + geometry_draw + ")";
        cql_filter_data_not_selected = " and (NOT (" + data_from_navarra + " ) or NOT( WITHIN(the_geom, " + geometry_draw + ")))";
      }

    }

    cql_filter_not_selected = cql_filter + cql_filter_data_not_selected;
    cql_filter_selected = cql_filter + cql_filter_data_selected;

    //elimina los puntos dibujados de la capa
    if (first_layer) {
      mymap.removeLayer(project_current);
      layerControl.removeLayer(project_current);
      mymap.removeLayer(project_current_selected);
      layerControl.removeLayer(project_current_selected);
    }
    first_layer = true;

    current_layer = workspace + ":" + name_layer;

    // Aplica estilo según tipo de geometría
    let style = Navarra.geomap_tools.get_style_geoserver(type_geometry);

    // agrega registros NO seleccionados en la tabla
    current_tenement = Navarra.dashboards.config.current_tenement;
    var randint = Math.floor( Math.random() * 200000 ) + 1;
    layerProjects = new MySource(protocol + "//" + url + ":" + port + "/geoserver/"+current_tenement+"/wms?authkey="+Navarra.dashboards.config.geo_key+"&random=" + randint, {
      layers: current_layer, //nombre de la capa (ver get capabilities)
      format: 'image/png',
      crs: L.CRS.EPSG4326,
      transparent: 'true',
      opacity: 1,
      version: '1.0.0', //wms version (ver get capabilities)
      tiled: true,
      maxZoom: 20,
      styles: style,
      INFO_FORMAT: 'application/json',
      format_options: 'callback:getJson',
      CQL_FILTER: cql_filter_not_selected,
    })

    project_current = layerProjects.getLayer(current_layer).addTo(mymap);
    layerControl.addOverlay(project_current, labelLayer, null, {
      sortLayers: false
    });

    // agrega registros seleccionados en la tabla
    let style_selected = Navarra.geomap_tools.get_style_geoserver_selected(type_geometry);
    current_tenement = Navarra.dashboards.config.current_tenement;
    layerProjectsSelected = new MySource(protocol + "//" + url + ":" + port + "/geoserver/"+current_tenement+"/wms?authkey="+Navarra.dashboards.config.geo_key+"", {
      layers: current_layer, //nombre de la capa (ver get capabilities)
      format: 'image/png',
      transparent: 'true',
      opacity: 1,
      version: '1.0.0', //wms version (ver get capabilities)
      tiled: true,
      maxZoom: 20,
      styles: style_selected,
      INFO_FORMAT: 'application/json',
      format_options: 'callback:getJson',
      CQL_FILTER: cql_filter_selected
    })

    project_current_selected = layerProjectsSelected.getLayer(current_layer).addTo(mymap);
    if(data_from_navarra!=""){
      layerControl.addOverlay(project_current_selected, "Seleccionados", null, {
        sortLayers: false
      });
      $('#checkbox_div_Seleccionados').removeClass('d-none');
      $('#checkbox_Seleccionados').prop("checked",true);
    } else{
      $('#checkbox_div_Seleccionados').addClass('d-none');
      $('#checkbox_Seleccionados').prop("checked",false);
    }
  }

  function layers_internal() {
    current_layer = Navarra.dashboards.config.name_layer;
    current_layer_name = Navarra.dashboards.config.name_layer;

    // verifica que capas estás chequeadas
    active_internal_layers = get_layers_checked();

    // elimina las capas creadas anteriormente
    for(x=0;x<layer_array.length;x++){
      mymap.removeLayer(layer_array[x]);
      layerControl.removeLayer(layer_array[x]);
    }
    layer_array=[];layers_internal

    data = project_type_layers;
    $.each(data, function(lay, dat) {
      let layer = dat.layer;
      let label_layer = dat.name;
      let color_layer = dat.color;
      let type_geometry = dat.type_geometry;
      let folder_id = dat.folder_id;
      let folder_name = dat.folder_name;
      let workspace = Navarra.dashboards.config.current_tenement;
      // Aplica estilo según tipo de geometría
      let style = Navarra.geomap_tools.get_style_geoserver(type_geometry);

      if (color_layer == '') {
        color_layer = "#00ff55";
      }
      var cql_filter = getCQLFilter_layer(dat);
      // genera capa con todos los datos, sin tener en cuenta la intersección con la capa activa
      layer_current = workspace + ":" + layer;
      layerSubProjects = new MySource(protocol + "//" + url + ":" + port + "/geoserver/"+workspace+"/wms?authkey="+Navarra.dashboards.config.geo_key+"", {
        layers: layer_current, //nombre de la capa (ver get capabilities)
        format: 'image/png',
        transparent: 'true',
        opacity: 1,
        version: '1.0.0', //wms version (ver get capabilities)
        tiled: true,
        maxZoom: 20,
        styles: style,
        env: 'color:' + color_layer,
        INFO_FORMAT: 'application/json',
        format_options: 'callback:getJson',
        CQL_FILTER: cql_filter
      })
      projectsa = layerSubProjects.getLayer(layer_current);
      layerControl.addOverlay(projectsa, layer, null, {
        sortLayers: true
      });
      //genera Modal de capas internas
      if(first_time_internal_layers){
        var new_item = Navarra.layer_filters.init(layer, label_layer, folder_id, folder_name);
        $('#projects_container').append(new_item);
        Navarra.layer_filters.setdate_time_picker();
      }
      layer_array.push(projectsa);
      // genera capa con los datos que se intersectan con la capa activa
      //aplica filtro intercapas para mostrar solo aquellos registros que se intersectan con la capa activa
      var current_layer_filters = Navarra.project_types.config.current_layer_filters.replace(/'/g,"''");
      cql_filter += " and INTERSECTS(the_geom, collectGeometries(queryCollection('" + workspace + ':' + name_layer + "', 'the_geom', '" + current_layer_filters + "')))";
    // genera capa con todos los datos de la intersección con la capa activa

      layer_current_intersect = workspace + ":" + layer;
      layerSubProjects = new MySource(protocol + "//" + url + ":" + port + "/geoserver/"+workspace+"/wms?authkey="+Navarra.dashboards.config.geo_key+"", {
        layers: layer_current_intersect, //nombre de la capa (ver get capabilities)
        format: 'image/png',
        transparent: 'true',
        opacity: 1,
        version: '1.0.0', //wms version (ver get capabilities)
        tiled: true,
        maxZoom: 20,
        styles: style,
        env: 'color:' + color_layer,
        INFO_FORMAT: 'application/json',
        format_options: 'callback:getJson',
        CQL_FILTER: cql_filter
      })
      projectsa = layerSubProjects.getLayer(layer_current_intersect);
      layerControl.addOverlay(projectsa, layer+ "-filtrados", null, {
        sortLayers: true
      });
      layer_array.push(projectsa);
    }) // Cierra each data
    first_time_internal_layers = false;
    //vuelve a checkear las capas anteriormente checkeadas
    var check_layers = document.querySelectorAll('.leaflet-control-layers-selector');
    for(l=0; l<check_layers.length; l++){
      if(check_layers[l].type=='checkbox'){
        var name_layer_project = $(check_layers[l]).next().html().substring(1);
        if(active_internal_layers.indexOf(name_layer_project)>=0){
          check_layers[l].click();
        }
      }
    }
    // Verifica si hay filtro intercapa generado por el usuario
    if($('#switch_intersect_layers').is(":checked")){
      intersect_layers();
    }
} // Cierra layers_internal

function get_layers_checked(){
  var active_internal_layers=[];
    var check_layers = document.querySelectorAll('input:checked.leaflet-control-layers-selector');
    for(l=0; l<check_layers.length; l++){
      if(check_layers[l].type=='checkbox'){
        var name_layer_project = $(check_layers[l]).next().html().substring(1);

        if(name_layer_project.toLowerCase()!=current_layer_name.toLowerCase() && name_layer_project.toLowerCase()!="seleccionados" )
        active_internal_layers.push(name_layer_project);
      }
    }
    return active_internal_layers;
}

function getCQLFilter_layer(dat){
  cql_filter = "1 = 1";
  // Aplica filtro por atributo de la capa (Filtros de usuarios)
  if (dat.layer_filters.attribute_filter) {
    data_filter = dat.layer_filters.attribute_filter.split('|');
    cql_filter += " and " + data_filter[0] + " " + data_filter[1] + " " + data_filter[2];
  }

  // Aplica filtro por owner de la capa (Filtros de usuarios)
  if (dat.layer_filters.owner_filter) {
    var user_name = Navarra.dashboards.config.user_name;
    cql_filter += " and app_usuario='" + user_name + "'";
  }

  // Aplica filtro intercapa (Filtros de usuarios)
  if (dat.layer_filters.cl_filter) {
    let cl_name = dat.layer_filters.cl_filter.cl_name
    let cl_clasue = '1 = 1'

    // Aplica filtro intercapa por atributo (Filtros de usuarios)
    if (dat.layer_filters.cl_filter.cl_attribute_filter) {
      c_filter = dat.layer_filters.cl_filter.cl_attribute_filter.split('|');
      cl_clasue += " and " + c_filter[0] +" = '" + c_filter[2] + "'"
    }

    // Aplica filtro intercapa por owner (Filtros de usuarios)
    if (dat.layer_filters.cl_filter.cl_owner_filter) {
      var user_name = Navarra.dashboards.config.user_name;
      cl_clasue += " and app_usuario = ''" + user_name + "''"
    }

    cql_filter += " and INTERSECTS(the_geom, collectGeometries(queryCollection('" + workspace + ':' + cl_name + "', 'the_geom', '" + cl_clasue + "')))"
  }

    // Aplica filtro de time_slider de la capa
    var timeslider_layer = Navarra.project_types.config.timeslider_layers[dat.layer];
    if(timeslider_layer !=undefined){
      var from_date_layer = timeslider_layer.from_date;
      var to_date_layer = timeslider_layer.to_date;
      if (from_date_layer != '' || to_date_layer != '') {
        cql_filter += " AND (gwm_created_at BETWEEN '" + from_date_layer + "' AND '" + to_date_layer + "')"
      } else {
        cql_filter += ' AND row_enabled = true';
      }
    } else{
      cql_filter += ' AND row_enabled = true';
    }

    // Aplica filtro on the fly creado por el usuario
    var filters_layers = Navarra.project_types.config.filters_layers[dat.layer];
    if(filters_layers !=undefined){
      filters_layers.forEach(function(filter){
        var filter_field = filter.filter_field;
        var filter_operator = filter.filter_operator;
        var filter_value = filter.filter_value;
        var field_type = filter.field_type;
        if(field_type==5 && filter_value!='null' && filter_field != 'app_id' && filter_field != 'app_estado' && filter_field != 'app_usuario'){
          //!=null porque a los valores null los considera menores a
          cql_filter += " AND parseDouble("+ filter_field + ") "+ filter_operator + " '" + filter_value + "' and "+filter_field+" is not null";
        } else if(field_type==3 && filter_value!='null'){
           cql_filter += " AND dateFormat('yyyy/MM/dd',dateParse('dd/MM/yyyy'," + filter_field + ")) " + filter_operator + " dateFormat('yyyy/MM/dd',dateParse('dd/MM/yyyy','" + filter_value + "')) and " + filter_field + " IS NOT NULL";
        } else {
          cql_filter += " AND "+ filter_field + " "+ filter_operator + " '" + filter_value + "'";
        }
      });
      cql_filter = cql_filter.replace(/!= 'null'/g, " IS NOT NULL ");
      cql_filter = cql_filter.replace(/= 'null'/g, " IS NULL ");
    }
  return cql_filter;
}

  function layers_external() {
    //Layer outer
    if(xhr_layer_external && xhr_layer_external.readyState != 4) {
      xhr_layer_external.abort();
    }
    xhr_layer_external = $.ajax({
      type: 'GET',
      url: '/layers/find.json',
      datatype: 'json',
      success: function(data) {
        if (data != 0) {
          data.sort(function(a, b) {
            return a.name.localeCompare(b.name);
          });

          $('#externallayers_container').empty();

          $.each(data, function(c, v) {
            let sub_layer = v.layer
            layerSubProjects = new MySource(v.url, {
              layers: v.layer, //nombre de la capa (ver get capabilities)
              format: 'image/png',
              transparent: 'true',
              maxZoom: 20,
              opacity: 1,
              version: '1.1.1', //wms version (ver get capabilities)
              tiled: true,
              INFO_FORMAT: 'application/json',
              format_options: 'callback:getJson'
            })

            layer_outer = layerSubProjects.getLayer(sub_layer);
            layerControl.addOverlay(layer_outer, v.name, null, {
              sortLayers: true
            });

            //genera Modal de capas externas
            new_item = '<a id="external_layer_'+ v.layer +'" class="dropdown-item" href="#">' +
                          '<div class="align-items-center">' +
                            '<i id="' + v.layer + '" class="fas fa-eye-slash hidde-external-layers" title="Ocultar Capa" style="margin-right:7px"></i>' +
                            '<div class="custom-control custom-checkbox">' +
                              '<input class="custom-control-input" onchange="select_layer()" id="checkbox_' + v.name + '" type="checkbox" name="radio_mapabase">' +
                              '<label class="string optional control-label custom-control-label" for="checkbox_' + v.name + '"></label>' +
                            '</div>' +
                            '<label for="checkbox_' + v.name + '" style="margin-left: 0px;">' + v.name + '</label>' +
                          '</div>' +
                        '</a>';
            $('#externallayers_container').append(new_item);
          })

          $('a[id^="external_layer_"]').each(function() {
            var divId = $(this).attr('id')
            var escapedDivId = divId.replace(/:/g, '\\:');
            var prefix = "external_layer_";
            var layerId = divId.replace(prefix, "");
            var savedState = localStorage.getItem($(this).attr('id').replace("external_layer_", ""));

            if (savedState === 'hidden') {
              $(this).addClass('d-none');
            }
          });
        } else {
          new_item = '<a class="dropdown-item">No hay capas externas creadas</a>';
          $('#externallayers_container').append(new_item);
        }
      }
    })
  }

  wmsLayer = {};
  function show_ndvi(app_id_popup, event){

    var ev = event.target
    if ($(ev).hasClass('fa-layer-group')) {
      $.ajax({
        url: '/projects/get_coordinates',
        method: 'GET',
        datatype: 'json',
        data: { app_id_popup: app_id_popup },
        success: function(response) {

          var ndvi_label = mymap.createPane('ndvi_label');
          mymap.getPane('ndvi_label').style.zIndex = 650;
          mymap.getPane('ndvi_label').style.pointerEvents = 'none';

          wmsLayerValue = L.tileLayer.wms(response.sentinel_link, {
            layers: 'NDVI',
            format: 'image/png',
            transparent: true,
            pane: 'ndvi_label',
          });

          wmsLayerValue.addTo(mymap);
          wmsLayer[app_id_popup] = wmsLayerValue;
        },
      });

      $(ev).removeClass('fa-layer-group')
      $(ev).addClass('fa-times')
    } else {
      wmsLayer[app_id_popup].remove();
      $(ev).addClass('fa-layer-group')
      $(ev).removeClass('fa-times')
    }
  }; //Cierra función show_ndvi

  function modal_points_number(){
    var modal = document.getElementById('pointsModal');
    var numberInput = document.getElementById('numberInput');
    modal.style.display = 'block';

    $('#close_modal_points').click(function(){
      modal.style.display = 'none';
    });
  };

  function modal_save_multipoints(){
    var modal = document.getElementById('savePointsModal');
    modal.style.display = 'block';

    $('#close_modal_multipoints').click(function(){
      modal.style.display = 'none';
    });
  }

  function show_random_points(app_id_popup){
    var pathElements = document.querySelectorAll('.leaflet-interactive');
    if (pathElements.length > 0) {
      pathElements.forEach(function (element) {
        element.remove();
      });
    };

    $.ajax({
      url: '/projects/get_random_points',
      method: 'POST',
      datatype: 'json',
      data: {
        app_id_popup: app_id_popup,
        number_point_value: number_point_value
      },
      success: function(response) {
        geoJsonString = {
          "type": "MultiPoint",
          "coordinates": response.geojson_coordinates
        };

        multipoints_coordinates = response.geojson_coordinates
        var geoJsonData = JSON.parse(JSON.stringify(geoJsonString));

        var pointsLayer = L.geoJSON(geoJsonData, {
          pointToLayer: function (feature, latlng) {
            return mpcircleMarker = L.circleMarker(latlng, {
              radius: 6,
              weight: 1,
              opacity: 1,
              fillOpacity: 0.6,
              className: app_id_popup+'-multipoints'
            });
          }
        }).addTo(mymap);
      },
    });
    mymap.closePopup();
  }

  function save_multipoints(app_id_popup){
    $.ajax({
      url: '/projects/save_randoms_multipoints',
      method: 'POST',
      datatype: 'json',
      data: {
        number_point_value: number_point_value,
        multipoints_coordinates: multipoints_coordinates,
        project_selected_value: project_selected_value
      },
      success: function(response) {

        $('#text_toast').html(response['status']);
        $('#toast').toast('show');

        mymap.closePopup();

        var pathElements = document.querySelectorAll('.leaflet-interactive');
        pathElements.forEach(function (element) {
          element.remove();
        });
      },
    });
  };

  function buttons_roles(){
    current_tenant = Navarra.dashboards.config.current_tenant
    $.ajax({
      url: '/projects/has_ndvi_and_multipoints_role',
      method: 'POST',
      datatype: 'json',
      data: {
        current_tenant: current_tenant
      },
      success: function(data) {
        ndvi_event = data.find_ndvi_permission
        multipoints_event = data.find_multipoints_permission
        pdf_event = data.find_pdf_permission
      }
    });
  }

  function popup() {
    buttons_roles();
    MySource = L.WMS.Source.extend({
      'showFeatureInfo': function(latlng, info) {
        if(latlng["lat"]!=last_lat || latlng["lng"]!=last_long){
          //si hace click en otro punto borra contenedor de popup
          $('#popup_created').empty();
        }
        last_lat=latlng["lat"];
        last_long=latlng["lng"];
        if (!this._map) {
          return;
        }
        draw_disabled = Navarra.dashboards.config.draw_disabled;
        if (draw_disabled) {

          var cc = JSON.parse(info);
          if (cc['features'].length > 0) {
            var prop = cc['features'][0]['properties'];
            project_name_feature = cc['features'][0]['id'];
            project_name = project_name_feature.split('.fid')[0];
            var count = 1;
            xhr_popup = $.ajax({
                type: 'GET',
                url: '/project_fields/field_popup.json',
                datatype: 'json',
                data: {
                  project_name: project_name
                },
                success: function(data) {
                  //evita abrir popups si está en modo edición de polígono
                  if(polygon_edit_vertexs.length>0){return}
                  var fields_popup = data["fields_popup"];
                  var fields_ids = data["fields_ids"];
                  var div_popup = document.createElement('DIV');
                  div_popup.className="div_popup";
                  var new_p = document.createElement('P');
                  new_p.className="tittle_popup";
                  new_p.innerHTML=data["project_name"];
                  div_popup.appendChild(new_p);

                  Object.keys(fields_popup).forEach(function(value) {
                    label = data["fields_popup"][value];
                    field_type_id = data["fields_ids"][value];
                    var val = prop[value]
                    // Valida si el valor no es nulo
                    if (val != null && val != 'null') {
                      // Elimina los corchetes y comillas del valor (en caso que contenga)
                      val = val.toString().replace(/\[|\]|\"/g, '');
                      var new_p = document.createElement('P');
                      new_p.className="p_popup"
                      new_p.innerHTML=label + ': ' + val;
                      div_popup.appendChild(new_p);

                      if (field_type_id == 12) {
                        var hyperlink;
                        if (val.indexOf("http://") === 0 || val.indexOf("https://") === 0) {
                          hyperlink = "<a href='" + val + "' target='_blank' onclick='return confirm(\"¿Estás seguro de que deseas salir de Geoworks?\");'>" + val + "</a>";
                        } else {
                          hyperlink = "<a href='https://" + val + "' target='_blank' onclick='return confirm(\"¿Estás seguro de que deseas salir de Geoworks?\");'>" + val + "</a>";
                        }
                        new_p.innerHTML=label + ': ' + hyperlink;
                      }
                    }
                  });
                  if(Navarra.dashboards.config.name_project==data["project_name"]){
                    app_id_popup=prop["app_id"];
                    localStorage.setItem('app_id_popup', app_id_popup);

                    div_popup_icon = document.createElement('DIV');
                    div_popup_icon.style.textAlign = 'right';
                    div_popup_icon.setAttribute('id', 'icons_popup');
                      
                    if (Navarra.dashboards.config.current_tenant == 'impulsa') {
                      var new_p = document.createElement('I');
                      new_p.setAttribute("onclick",'share_geometries('+app_id_popup+')');
                      new_p.className="fas fa-share-alt info_icon";
                      new_p.title="Compartir geometría";
                      div_popup_icon.appendChild(new_p);
                    } 

                    if (pdf_event.length !== 0) {
                      var new_p = document.createElement('I');
                      new_p.setAttribute("onclick",'create_pdf_from_popup('+app_id_popup+')');
                      new_p.className="fas fa-file-pdf info_icon";
                      new_p.title="Crear PDF";
                      div_popup_icon.appendChild(new_p);
                    }

                    element = document.querySelector('[class^="'+app_id_popup+'"]');
                    if (element != null) {
                      point_number = element.className.baseVal.split('-')[0]

                      if (app_id_popup == parseInt(point_number)) {
                        var new_p = document.createElement('I');
                        new_p.setAttribute("onclick",'Navarra.geomaps.modal_save_multipoints('+app_id_popup+')');
                        new_p.className="fas fa-check info_icon";
                        new_p.title="Crear Multipuntos";
                        new_p.style.textAlign = 'left';
                        div_popup_icon.appendChild(new_p);
                      }
                    };

                    if (multipoints_event.length !== 0) {
                      type_geometry = Navarra.dashboards.config.type_geometry
                      if (type_geometry == 'Polygon' && current_layer_name == project_name) {
                        var new_p = document.createElement('I');
                        new_p.setAttribute("onclick",'Navarra.geomaps.modal_points_number('+app_id_popup+')');
                        new_p.className="fas fa-circle info_icon";
                        div_popup_icon.appendChild(new_p);
                      }
                    };

                    var new_p = document.createElement('I');
                    new_p.setAttribute("onclick",'Navarra.photos.open_photos('+app_id_popup+',false)');
                    new_p.title="Abrir fotos de geometría";
                    new_p.className="fas fa-image info_icon";
                    div_popup_icon.appendChild(new_p);

                    var new_p = document.createElement('I');
                    if(Navarra.dashboards.config.current_tenant == 'scm'){
                      new_p.setAttribute("onclick",'edit_registers('+app_id_popup+',true)');
                    } else {
                      new_p.setAttribute("onclick",'normalBehavior('+app_id_popup+',true)');
                    }
                    new_p.title="Formulario de geometría";
                    new_p.className="fas fa-info-circle info_icon";
                    div_popup_icon.appendChild(new_p);

                    if (ndvi_event.length !== 0) {
                      if (type_geometry == 'Polygon' && current_layer_name == project_name) {
                        if (mymap.hasLayer(wmsLayer[app_id_popup]) === false){
                          var new_p = document.createElement('I');
                          new_p.setAttribute("id", "display_ndvi");
                          new_p.setAttribute("onclick",'Navarra.geomaps.show_ndvi('+ app_id_popup +', event)');
                          new_p.title="NDVI";
                          new_p.className="fas fa-layer-group info_icon";
                          div_popup_icon.appendChild(new_p);
                        } else {
                          var new_p = document.createElement('I');
                          new_p.setAttribute("id", "hide_ndvi");
                          new_p.setAttribute("onclick",'Navarra.geomaps.show_ndvi('+ app_id_popup +', event)');
                          new_p.className = "fa fa-times info_icon";
                          div_popup_icon.appendChild(new_p);
                        }
                      };
                    };

                    if(Navarra.dashboards.config.current_tenement == "fepedi" || Navarra.dashboards.config.current_tenement == "amandes"  ){// si es proyecto iot por ahora hardcode para fepedi
                      var new_p = document.createElement('I');
                      new_p.setAttribute("onclick",'Navarra.iot.open_iot_monitoring('+app_id_popup+')');
                      new_p.className="fas fa-chart-line info_icon";
                      div_popup_icon.appendChild(new_p);
                    }

                    div_popup.appendChild(div_popup_icon);
                  }

                  var isdifferent=true;
                  //verifica que si se está haciendo click en el mismo punto
                  $(".div_popup").each(function(){
                    if(div_popup.innerHTML==$(this).html()){
                      isdifferent=false;
                    }
                  });
                  if(isdifferent){
                    document.getElementById("popup_created").appendChild(div_popup);
                  }

                  inn = document.getElementById("popup_created").innerHTML;
                  checked = $('#select').hasClass('active');

                  if (draw_disabled) {
                    var popup_drawable = L.popup({autoPan:false})
                      .setLatLng(latlng)
                      .setContent(inn)
                      .openOn(mymap);
                      makeDraggable(popup_drawable);
                  }
                  // si es polígono dibuja el polígono de otro color
                  if(type_geometry=="Polygon"){
                    if(Navarra.dashboards.config.current_tenant == 'impulsa'){
                      create_polygon_selected_impulsa(cc['features'][0]['geometry']['coordinates']);
                    } else {
                      create_polygon_selected(cc['features'][0]['geometry']['coordinates']);
                    }
                  }
                } // Cierra success
              }); // Cierra ajax
            } // Cierra if
        //  } // Cierra if
        } // Cierra if
      } // Cierra showFeatureInfo
    }); // Cierra L.WMS.Source.extend
  }

function makeDraggable(popup){
    //  var pos = mymap.latLngToLayerPoint(popup.getLatLng());
      //L.DomUtil.setPosition(popup._wrapper.parentNode, pos);
      var draggable = new L.Draggable(popup._container, popup._wrapper);
      draggable.enable();

      draggable.on('dragend', function() {
        $('.leaflet-popup-tip').css('display','none')
      });
    }

function close_all_popups(){
  mymap.closePopup();
  app_id_popup = "";
  if(polygon_selected!=undefined){
    mymap.removeLayer(polygon_selected);
  }
}

function get_zoomextent(){
  event.stopPropagation();
  if(editableLayers.getLayers().length!=0){
    mymap.fitBounds(editableLayers.getBounds());
  } else{
    var project_type_id = Navarra.dashboards.config.project_type_id;
    var attribute_filters = Navarra.project_types.config.attribute_filters;
    var filtered_form_ids = Navarra.project_types.config.filtered_form_ids;
    var from_date = Navarra.project_types.config.from_date;
    var to_date = Navarra.project_types.config.to_date;
    var intersect_width_layers = $('#switch_intersect_layers').is(":checked");
    var active_layers = get_active_layers();
    var timeslider_layers = Navarra.project_types.config.timeslider_layers;
    var filters_layers = Navarra.project_types.config.filters_layers;
    $.ajax({
      type: 'POST',
      url: '/project_types/get_extent',
      datatype: 'json',
      data: {
        project_type_id: project_type_id,
        attribute_filters: attribute_filters,
        filtered_form_ids: filtered_form_ids,
        from_date: from_date,
        to_date: to_date,
        timeslider_layers: timeslider_layers,
        filters_layers: filters_layers,
        intersect_width_layers: intersect_width_layers,
        active_layers: active_layers
      },
      success: function(data) {
        if(data.data[0].miny==null || data.data[0].minx==null || data.data[0].maxy==null || data.data[0].maxx==null){
          //no hay datos que mostrar
          show_data_dashboard();
          show_kpis();
        } else{
          mymap.fitBounds([[data.data[0].miny, data.data[0].minx],[data.data[0].maxy, data.data[0].maxx]]);
        }
       }
    });
  }
}


function show_labels(setbbox){
  if(labels!=undefined){
    mymap.removeLayer(labels);
  }

  if($('#checkbox_Etiquetas').prop('checked')==true){
    if(setbbox){
      var cql_filter =  getCQLFilter(true);
    } else {
      var cql_filter =  getCQLFilter(false);
    }

    $(".fakeLoader").css("display", "block");
    current_tenement = Navarra.dashboards.config.current_tenement;
    var owsrootUrl = protocol + "//" + url + ":" + port + "/geoserver/"+current_tenement+"/wfs";
    var defaultParameters = {
      authkey: Navarra.dashboards.config.geo_key,
      service: 'WFS',
      version: '1.0.0',
      crs: L.CRS.EPSG4326,
      request: 'GetFeature',
      typeName: Navarra.dashboards.config.current_tenement+':'+Navarra.dashboards.config.name_layer,
      outputFormat: 'application/json',
      CQL_FILTER: cql_filter
    };
    var parameters = L.Util.extend(defaultParameters);
    var URL = owsrootUrl + L.Util.getParamString(parameters);
    var label_fields = $('.field_label');
    $.ajax({
      url: URL,
      success: function (data) {
      labels = new L.LayerGroup();
      var geojson = new L.geoJson(data, {
        onEachFeature: function(feature, layer){
          switch (type_geometry) {
            case 'Point':
              var latlng_new = layer._latlng;
            break;
            case 'Polygon':
              var latlongs = layer._latlngs;
              var poligon_new = new L.Polygon(latlongs);
              var center = poligon_new.getBounds().getCenter();
              var latlng_new = new L.LatLng(center.lat,center.lng)
            break;
            case 'LineString':
              var latlongs = layer._latlngs;
              var poligon_new = new L.Polyline(latlongs);
              var center = poligon_new.getBounds().getCenter();
              var latlng_new = new L.LatLng(center.lat,center.lng)
            break;
          }
          var popupContent1 = "";
          label_fields.each(function(){
            key_label = $(this).val();
            if(feature.properties[key_label]!=null){
              popupContent1 += '<p style="text-shadow: -1px 0 white, 0 1px white, 1px 0 white, 0 -1px white">'+feature.properties[key_label]+'</p>';
            }
          });
          var popup_new = new L.Popup({closeButton:false, closeOnClick:false, className: 'custom_label', autoPan:false});
          popup_new.setLatLng(latlng_new);
          popup_new.setContent(popupContent1);
          labels.addLayer(popup_new)
        }
      });
      mymap.addLayer(labels);
      $(".fakeLoader").css("display", "none");
      }
    });
  }
}


function show_labels_in_others_layers(setbbox, event){

  label_id = event.target.id
  startIndex = label_id.indexOf("checkbox_etiquetas");
  layer_label_new = label_id.slice(startIndex + "checkbox_etiquetas".length);

  if (layer_label_new.startsWith("_")) {
    layer_label_new = layer_label_new.slice(1);
  };

  var new_label_class = document.querySelectorAll('.label_'+layer_label_new+'');
  if (new_label_class.length > 0) {
    new_label_class.forEach(function (element) {
      element.remove();
    });
  };

  $.ajax({
    type: 'GET',
    url: '/project_types/get_added_layer_data',
    datatype: 'json',
    data: {
      layer_label_new: layer_label_new
    },
    success: function(data) {
      id_added_layer = data.id_added_layer
      type_geometry_layer = data.type_geometry_layer
      label_field_added_layer = data.label_field_added_layer

      if($('#checkbox_etiquetas_'+layer_label_new+'').prop('checked')==true){
        if(setbbox){
          var cql_filter_new = getCQLFilter(true);
          cql_filter_new = cql_filter_new.replace(/project_type_id = \d+/, "project_type_id = " + id_added_layer);
        }else{
          var cql_filter = getCQLFilter(false);
        }

        $(".fakeLoader").css("display", "block");
        current_tenement = Navarra.dashboards.config.current_tenement;
        var owsrootUrl = protocol + "//" + url + ":" + port + "/geoserver/"+current_tenement+"/wfs";
        var defaultParameters = {
          authkey: Navarra.dashboards.config.geo_key,
          service: 'WFS',
          version: '1.0.0',
          crs: L.CRS.EPSG4326,
          request: 'GetFeature',
          typeName: Navarra.dashboards.config.current_tenement+':'+layer_label_new,
          outputFormat: 'application/json',
          CQL_FILTER: cql_filter_new
        };
        var parameters = L.Util.extend(defaultParameters);
        var URL = owsrootUrl + L.Util.getParamString(parameters);
        var label_fields = label_field_added_layer

        $.ajax({
          url: URL,
          success: function (data) {
            labels_layer = new L.LayerGroup();
            var geojson = new L.geoJson(data, {
              onEachFeature: function(feature, layer){
                switch (type_geometry_layer) {
                  case 'Point':
                    var latlng_new_layer = layer._latlng;
                  break;
                  case 'Polygon':
                    var latlongs_layer = layer._latlngs;
                    var poligon_new = new L.Polygon(latlongs_layer);
                    var center_layer = poligon_new.getBounds().getCenter();
                    var latlng_new_layer = new L.LatLng(center_layer.lat,center_layer.lng)
                  break;
                  case 'LineString':
                    var latlongs_layer = layer._latlngs;
                    var poligon_new = new L.Polyline(latlongs_layer);
                    var center_layer = poligon_new.getBounds().getCenter();
                    var latlng_new_layer = new L.LatLng(center_layer.lat,center_layer.lng)
                  break;
                }
                var popupContent2 = "";
                label_fields.forEach(function(key_label){
                  if(feature.properties[key_label] != null){
                    popupContent2 += '<p style="text-shadow: -1px 0 #78edff, 0 1px #78edff, 1px 0 #78edff, 0 -1px #78edff">'+feature.properties[key_label]+'</p>';
                  }
                });
                var popup_new_layer = new L.Popup({closeButton:false, closeOnClick:false, className: 'custom_label label_'+layer_label_new+'', autoPan:false});
                popup_new_layer.setLatLng(latlng_new_layer);
                popup_new_layer.setContent(popupContent2);
                labels_layer.addLayer(popup_new_layer)
              }
            });
            mymap.addLayer(labels_layer);
            $(".fakeLoader").css("display", "none");
          }
        });
      }
      // var layer_container = document.querySelectorAll('#projects_container');
      // if (layer_container.length > 0) {
      //   layer_container.forEach(function (element) {
      //     element.classList.add('d-none');
      //   });
      // };
    }
  });
};

function show_labels_subfields(setbbox, selectedElements){
  if(selectedElements.length >= 1){
    if(typeof(labels_subfields)!= 'undefined'){
      mymap.removeLayer(labels_subfields);
    }

    if(setbbox){
      var cql_filter =  getCQLFilter(true);
    } else {
      var cql_filter =  getCQLFilter(false);
    }

    $(".fakeLoader").css("display", "block");
    current_tenement = Navarra.dashboards.config.current_tenement;
    var owsrootUrl = protocol + "//" + url + ":" + port + "/geoserver/"+current_tenement+"/wfs";
    var defaultParameters = {
      authkey: Navarra.dashboards.config.geo_key,
      service: 'WFS',
      version: '1.0.0',
      crs: L.CRS.EPSG4326,
      request: 'GetFeature',
      typeName: Navarra.dashboards.config.current_tenement+':'+Navarra.dashboards.config.name_layer,
      outputFormat: 'application/json',
      CQL_FILTER: cql_filter
    };
    var parameters = L.Util.extend(defaultParameters);
    var URL = owsrootUrl + L.Util.getParamString(parameters);
    $.ajax({
      url: URL,
      success: function (data) {
        labels_subfields = new L.LayerGroup();

        var project_ids = [];
        data.features.forEach(function(feature) {
          var appId = feature.properties.app_id;
          project_ids.push(appId);
        });

        current_layer_id = Navarra.dashboards.config.project_type_id
        $.ajax({
          type: 'GET',
          url: '/project_types/get_added_layer_subforms_data',
          datatype: 'json',
          data: {
            current_layer_id: current_layer_id,
            project_ids: project_ids,
            selectedElements: selectedElements
          },
          success: function(data_info) {
            var label_fields = data_info.show_subforms_labels_by_project
            var geojson = new L.geoJson(data, {
              onEachFeature: function(feature, layer){
                switch (type_geometry) {
                  case 'Point':
                    var latlng_new = layer._latlng;
                  break;
                  case 'Polygon':
                    var latlongs = layer._latlngs;
                    var poligon_new = new L.Polygon(latlongs);
                    var center = poligon_new.getBounds().getCenter();
                    var latlng_new = new L.LatLng(center.lat,center.lng)
                  break;
                  case 'LineString':
                    var latlongs = layer._latlngs;
                    var poligon_new = new L.Polyline(latlongs);
                    var center = poligon_new.getBounds().getCenter();
                    var latlng_new = new L.LatLng(center.lat,center.lng)
                  break;
                }
                var label_fields = data_info.show_subforms_labels_by_project
                var popupContent3 = "";

                label_fields = label_fields[feature.properties['app_id']]

                label_fields.forEach(function(key_label){
                  if(key_label != null){
                    popupContent3 += '<p style="text-shadow: -1px 0 #FFFF66, 0 1px #FFFF66, 1px 0 #FFFF66, 0 -1px #FFFF66">'+key_label+'</p>';
                  }
                });

                var offsetValue;
                if (label_fields.length >= 1 && label_fields.length <= 100) {
                  if (type_geometry === 'Point') {
                    offsetValue = 40 + (label_fields.length * 12);
                  } else {
                    offsetValue = 25 + (label_fields.length * 12);
                  }
                }
                var popup_new = new L.Popup({closeButton: false, closeOnClick: false, className: 'custom_label', offset: [0, offsetValue], autoPan: false});
                popup_new.setLatLng(latlng_new);
                popup_new.setContent(popupContent3);
                labels_subfields.addLayer(popup_new)
              }
            });
            mymap.addLayer(labels_subfields);
            $(".fakeLoader").css("display", "none");
          }
        });
      }//success info layer
    });
  }
};

function edit_geometry_in_map(event){
  event.stopPropagation();
  set_onclick_map(true);
  //Cierra modal lateral
  $("#info-modal").modal("hide");
  Navarra.project_types.config.item_selected="";
  Navarra.project_types.config.data_dashboard = "";

  delete_markers();
  $('#confirmation_geometry_button').removeClass('confirmation_geometry_button_new');
  $('#confirmation_geometry_button').addClass('confirmation_geometry_button_edit');
  var cql_filter_edit_geometry =  getCQLFilter(true);
  if(app_id_popup!="" || type_geometry=="Polygon" || type_geometry=="LineString"){
    if(app_id_popup==""){
      $('#confirmation_success_geometry_text').html('Haga click sobre la geometría que desea editar');
      $('.confirmation_success_geometry').removeClass('d-none');
      return;
    }
    cql_filter_edit_geometry += " and app_id = "+app_id_popup;
  }

  $('.confirmation_geometry').removeClass('d-none');
  current_tenement = Navarra.dashboards.config.current_tenement;
  var owsrootUrl = protocol + "//" + url + ":" + port + "/geoserver/"+current_tenement+"/wfs";
  var defaultParameters = {
    authkey: Navarra.dashboards.config.geo_key,
    service: 'WFS',
    version: '1.0.0',
    crs: L.CRS.EPSG4326,
    request: 'GetFeature',
    typeName: Navarra.dashboards.config.current_tenement+':'+Navarra.dashboards.config.name_layer,
    outputFormat: 'application/json',
    CQL_FILTER: cql_filter_edit_geometry,
  };
  var parameters = L.Util.extend(defaultParameters);
  var URL = owsrootUrl + L.Util.getParamString(parameters);
  $.ajax({
    url: URL,
    success: function (data) {
    close_all_popups();
    markers = new L.LayerGroup();
    var geojson = new L.geoJson(data, {
      onEachFeature: function(feature, layer){
        switch (type_geometry) {
          case 'Point':
            var latlongs = [];
            latlongs.push(layer._latlng);
          break;
          case 'Polygon':
            var latlongs = layer._latlngs[0];
          break;
          case 'LineString':
            var latlongs = layer._latlngs;
            $('#checkbox_split_line').prop('checked',false);
            if(latlongs.length <= 2){
              $('#div_split_line').addClass('d-none');
            } else {
              $('#div_split_line').removeClass('d-none');
            }
          break;
        }
          latlongs.forEach(function(latlong, index){
            marker_new = create_marker(latlong,index,layer.feature.properties.app_id, false);
            markers.addLayer(marker_new);
            id_for_split = feature.properties.app_id;
          });
      }
    });
    mymap.addLayer(markers);
    if(Navarra.dashboards.config.type_geometry=="Polygon" || Navarra.dashboards.config.type_geometry=="LineString" ){
      create_polygon_edit();
    }
    }
  });
}

function create_marker(latlong,index, title_id, is_aditional_marker){
  var  myIcon = L.icon({
      iconUrl: "<%= asset_path('leaflet/custom_icon.png') %>",
      iconSize: [44, 56],
      iconAnchor: [22, 55],
      shadowUrl: "<%= asset_path('leaflet/marker-shadow.png') %>",
      shadowSize: [41, 41],
      shadowAnchor: [10, 40]
    });
  var  myIcon_selected = L.icon({
      iconUrl: "<%= asset_path('leaflet/custom_icon_delete.png') %>",
      iconSize: [44, 66],
      iconAnchor: [22, 65],
      shadowUrl: "<%= asset_path('leaflet/marker-shadow.png') %>",
      shadowSize: [41, 41],
      shadowAnchor: [10, 40]
    });
    var marker_options = {
      opacity: 0.6,
      draggable: true,
      title: title_id
    }
  marker = new L.Marker(latlong, marker_options);
  if(index==0){
    var lat_marker = (marker.getLatLng().lat).toFixed(6);
    var long_marker = (marker.getLatLng().lng).toFixed(6);
    $('#marker_position').html("Lat:"+lat_marker+" Long:"+long_marker);
  }
  marker.setIcon(myIcon);
  marker.on('drag', function(e) {
    var lat_marker = (e.latlng.lat).toFixed(6);
    var long_marker = (e.latlng.lng).toFixed(6);
    $('#marker_position').html("Lat:"+lat_marker+" Long:"+long_marker);
    if(type_geometry=="Polygon" || type_geometry=="LineString"){
      create_polygon_edit();
    }
  });
  marker.on('dragend', function(event){
    var data_to_edit = {
          id: event.target.options.title,
          latLng: event.target.getLatLng()
        }
    // elimina si hay uno id igual y luego lo agrega
    var index_to_delete = -1;
    geometries_to_edit.forEach(function(g, index){
      if (g.id == event.target.options.title){
        index_to_delete = index;
      }
    })
    if(index_to_delete>=0){
      geometries_to_edit.splice(index_to_delete,1);
    }
    geometries_to_edit.push(data_to_edit);
    event.target.setOpacity(1)
  });
  if(type_geometry=="Polygon" || type_geometry=="LineString"){
    marker.on('dragstart', function(event) {
      markers.eachLayer(function (layer) {
        layer.setOpacity(0.6);
      });
      event.target.setOpacity(1)
    });
    marker.on('click', function(event){
      if(markers.getLayers().length>3 && mymap.doubleClickZoom._enabled){
        event.target.setIcon(myIcon_selected);
        event.target.on('click',function(event){
          if(markers.getLayers().length>3){
            var index_to_remove = polygon_edit_vertexs.indexOf(event.target);
            polygon_edit_vertexs.splice(index_to_remove, 1);
            markers.removeLayer(event.target);
            mymap.removeLayer(event.target);
            create_polygon_edit();
          }
        });
      }
    });
  }
  if((type_geometry=="Polygon" || type_geometry=="LineString") && !is_aditional_marker){
    polygon_edit_vertexs.push(marker)
  }
  return marker;
}

function create_polygon_edit(){
  var polygon_options = {
    fillOpacity: 0.2,
    color: "#FFFFFF",
    fillColor:"#FFFFFF"
  }
  if (polygon_edit != undefined) {
    mymap.removeLayer(polygon_edit);
  }
  if (polyline_edit != undefined) {
    mymap.removeLayer(polyline_edit);
  }
  polygon_edit = new L.LayerGroup();
  polyline_edit = new L.LayerGroup();
  // busca coordenadas de los puntos
  var coordinates_newpol = [];
  polygon_edit_vertexs.forEach(function (layer) {
    coordinates_newpol.push(layer.getLatLng());
  });
  if(Navarra.dashboards.config.type_geometry=="Polygon"){
    var poligon_new = new L.Polygon(coordinates_newpol, polygon_options);
    coordinates_newpol.push(polygon_edit_vertexs[0].getLatLng());
  }
  var polyline_new = new L.Polyline(coordinates_newpol, polygon_options);
  polyline_new.on('click',function(ev){
     ev.originalEvent.view.L.DomEvent.stopPropagation(ev);
    var nearest_point, index_vertex;
    polyline_new.getLatLngs().forEach(function(vertex, index){
      var distance= vertex.distanceTo(new L.latLng(ev.latlng.lat,ev.latlng.lng));
      if(nearest_point==undefined || nearest_point>distance){
        nearest_point = distance;
        index_vertex = index;
        if(Navarra.dashboards.config.type_geometry=="LineString" && index_vertex == polyline_new.getLatLngs().length - 1){
          //Nos aseguramos de que el vértice agregado esté dentro de la línea
          index_vertex = index_vertex -1;
        }
      }
    });
    var new_title= polygon_edit_vertexs[0].options.title;
      var marker_new = create_marker(new L.latLng(ev.latlng.lat,ev.latlng.lng),0,new_title,true);
      polygon_edit_vertexs.splice(index_vertex+1, 0, marker_new);
      markers.addLayer(marker_new);
      mymap.addLayer(markers);
      create_polygon_edit;
  });
  if(Navarra.dashboards.config.type_geometry=="Polygon"){
    polygon_edit.addLayer(poligon_new);
    mymap.addLayer(polygon_edit);
  }
  polyline_edit.addLayer(polyline_new);
  mymap.addLayer(polyline_edit);
}

function cancel_geometry(event){
  event.stopPropagation();
  delete_markers();
  if($('.leaflet-container').hasClass('cursor-crosshair')){
    set_onclick_map(true);
  }
}

function delete_markers(){
  $('#confirmation_geometry_button').removeClass('confirmation_geometry_button_new');
  $('#confirmation_geometry_button').removeClass('confirmation_geometry_button_edit');
  geometries_to_edit=[];
  $('.confirmation_geometry').addClass('d-none');
  $('.confirmation_success_geometry').addClass('d-none');
  if (markers != undefined) {
    mymap.removeLayer(markers);
  }
  if (polygon_edit != undefined) {
    mymap.removeLayer(polygon_edit);
  }
  if (polyline_edit != undefined) {
    mymap.removeLayer(polyline_edit);
  }
  polygon_edit_vertexs=[];
  $('#marker_position').html("");
}

function save_geometry(){
  event.stopPropagation();
  var is_new_geom =$('#confirmation_geometry_button').hasClass('confirmation_geometry_button_new');
  if(geometries_to_edit.length==0 && !type_geometry=="LineString"){
    delete_markers();
    $('#confirmation_success_geometry_text').html('Sin cambios para editar');
    $('.confirmation_success_geometry').removeClass('d-none');
    return;
  }
  if(geometries_to_edit.length==0 && type_geometry=="LineString"){
    //agregar geometries_to_edit para una geometría que puede no haber sido editada
    var data_to_edit = {
      id: id_for_split,
      latLng: new L.LatLng(0,0)
    }
    geometries_to_edit = [];
    geometries_to_edit.push(data_to_edit);
  }

  if((polygon_edit_vertexs.length<3 && is_new_geom && type_geometry=="Polygon") || (polygon_edit_vertexs.length<2 && is_new_geom && type_geometry=="LineString") ){
    delete_markers();
    $('#confirmation_success_geometry_text').html('Geometría no válida');
    $('.confirmation_success_geometry').removeClass('d-none');
    set_onclick_map(true);
    return;
  }
  var duplicate_map = false
  polygon_edit_vertexs.forEach(function(vertex){
    if(vertex._latlng.lng>180 || vertex._latlng.lng<-180 ){
      duplicate_map = true;
    }
  });
  geometries_to_edit.forEach(function(vertex){
    if(vertex.latLng.lng>180 || vertex.latLng.lng<-180 ){
      duplicate_map = true;
    }
  });
  if(duplicate_map){
    delete_markers();
    $('#confirmation_success_geometry_text').html('Longitud fuera del rango');
    $('.confirmation_success_geometry').removeClass('d-none');
    set_onclick_map(true);
    return;
  }
  if($('#confirmation_geometry_button').hasClass('confirmation_geometry_button_edit')){
    search_geometric_calculation_fields();
  }
  if(is_new_geom){
    if(type_geometry=="Polygon" || type_geometry=="LineString"){
      var geometry_polygon_to_edit = []
      polygon_edit_vertexs.forEach(function(vertex){
        var vertex_edit = [];
        vertex_edit.push(vertex._latlng.lng);
        vertex_edit.push(vertex._latlng.lat);
        geometry_polygon_to_edit.push(vertex_edit);
      });
      var data_to_edit = {
        latLng: geometry_polygon_to_edit,
      }
      geometries_to_save = [];
      geometries_to_save.push(data_to_edit);
    } else{
      geometries_to_save = [];
      geometries_to_edit.forEach(function(geom){
      var latlong_geom = {
        lat: geom.latLng.lat,
        lng: geom.latLng.lng
      }
      var data_to_edit = {
          latLng: latlong_geom
        }
      geometries_to_save.push(data_to_edit)
    });
  }
  open_new_fields();
  }

}

function save_geometry_width_calculated_fields() {
  //geometry
  if(type_geometry=="Polygon" || type_geometry=="LineString"){

    var geometry_polygon_to_edit = []
    polygon_edit_vertexs.forEach(function(vertex){
      var vertex_edit = [];
      vertex_edit.push(vertex._latlng.lng);
      vertex_edit.push(vertex._latlng.lat);
      geometry_polygon_to_edit.push(vertex_edit);
    });
    //fields
      edited_field_calculated_all = [];
      Navarra.dashboards.config.field_geometric_calculated_all.forEach(function(field) {
        field.forEach(function(field_calculated) {
          if(field_calculated.id == geometries_to_edit[0].id){
            edited_field_calculated_all.push(field_calculated);
          }
        });
      });
    var data_to_edit = {
          id: geometries_to_edit[0].id,
          latLng: geometry_polygon_to_edit,
          fields_calculated: edited_field_calculated_all
        }
    geometries_to_save = [];
    geometries_to_save.push(data_to_edit);

 } else{
    geometries_to_save = [];
    geometries_to_edit.forEach(function(geom){
      //fields
      edited_field_calculated_all = [];
      Navarra.dashboards.config.field_geometric_calculated_all.forEach(function(field) {
        field.forEach(function(field_calculated) {
          if(field_calculated.id == geom.id){
            edited_field_calculated_all.push(field_calculated);
          }
        });
      });
      var latlong_geom = {
          lat: geom.latLng.lat,
          lng: geom.latLng.lng,
        }
      var data_to_edit = {
          id: geom.id,
          latLng: latlong_geom,
          fields_calculated: edited_field_calculated_all
        }
      geometries_to_save.push(data_to_edit)
    });
  }

  if($('#checkbox_split_line').is(":checked")){
    ulr_update = '/projects/split_geometry';
    type_update = 'POST';
  } else {
    ulr_update = '/projects/update_geom_and_calculated_fields';
    type_update = 'PATCH';
  }
  $.ajax({
    type: type_update,
    url: ulr_update,
    datatype: 'JSON',
    data: {
      data_to_edit: geometries_to_save,
      project_type_id: Navarra.dashboards.config.project_type_id
    },
    success: function(data_status) {
      Navarra.geomaps.current_layer();
      delete_markers();
      $('#confirmation_success_geometry_text').html(data_status['status']);
      $('.confirmation_success_geometry').removeClass('d-none');
      show_data_dashboard();
      show_kpis();
    }
  });
}

function close_success_message_geometry(){
  $('.confirmation_success_geometry').addClass('d-none');
  $('#confirmation_success_geometry_text').html('');
}

//Funcion para marcar el polígono seleccionado de otro color al hacer click sobre él
function create_polygon_selected(coordinates_newpol_selected){
  var polygon_options = {
    fill:false,
    color: "#d3d800",
  }
  if (polygon_selected != undefined) {
    mymap.removeLayer(polygon_selected);
  }
  polygon_selected = new L.LayerGroup();
  // busca coordenadas de los puntos
  var coordinates_newpol_selected_latlng=[];
  coordinates_newpol_selected[0].forEach(function (latlng) {
    coordinates_newpol_selected_latlng.push(new L.latLng(latlng[1],latlng[0]));
  });
  var poligon_new = new L.Polygon(coordinates_newpol_selected_latlng, polygon_options);
  polygon_selected.addLayer(poligon_new);
  mymap.addLayer(polygon_selected);
}

function create_polygon_selected_impulsa(coordinates_newpol_selected) {
  var polygon_options = {
    fill: true,
    color: "#000000",
    fillColor: "#d3d800",
    fillOpacity: 0.5
  };

  if (polygon_selected != undefined) {
    mymap.removeLayer(polygon_selected);
  }

  polygon_selected = new L.LayerGroup();

  var coordinates_newpol_selected_latlng = [];
  coordinates_newpol_selected[0].forEach(function (latlng) {
    coordinates_newpol_selected_latlng.push(new L.latLng(latlng[1], latlng[0]));
  });

  var poligon_new = new L.Polygon(coordinates_newpol_selected_latlng, polygon_options);

  polygon_selected.addLayer(poligon_new);
  mymap.addLayer(polygon_selected);
}

// función para traer los campos padres y verificar si tienen algún calculo geométrico
function search_geometric_calculation_fields(){
  $.ajax({
    type: 'GET',
    url: '/project_types/search_father_children_and_photos_data',
    datatype: 'json',
    data: {
      project_type_id: Navarra.dashboards.config.project_type_id,
      app_id: 0
    },
    success: function(data) {
      //variables necesarias para disparar el guardado de los campos luego de todos los success de las apis de geolocalización.
      Navarra.dashboards.config.field_geometric_calculated_count = 0;
      Navarra.dashboards.config.field_geometric_calculated_count_all = 0;
      Navarra.dashboards.config.field_geometric_calculated_length = 0;
      Navarra.dashboards.config.field_geometric_calculated_length_all = 0;
      Navarra.dashboards.config.field_geometric_calculated_all = [];
      Navarra.dashboards.config.field_geometric_calculated = [];
      data.father_fields.forEach(function(field){
        if(field.calculated_field=='{"provincia":""}' || field.calculated_field=='{"municipio":""}' || field.calculated_field=='{"superficie":""}' || field.calculated_field=='{"longitud":""}' || field.calculated_field=='{"googleMaps":""}' || field.calculated_field=='{"LatLong":""}'){
          Navarra.dashboards.config.field_geometric_calculated_length ++;
        }
      });
      if(type_geometry=="Polygon" || type_geometry=="LineString"){
        var geom = get_geom_to_calculate();
        data.father_fields.forEach(function(field){
          if(field.calculated_field=='{"provincia":""}' || field.calculated_field=='{"municipio":""}' || field.calculated_field=='{"superficie":""}' || field.calculated_field=='{"longitud":""}' || field.calculated_field=='{"googleMaps":""}' || field.calculated_field=='{"LatLong":""}'){
            var calculated_field = field.calculated_field;
            Navarra.dashboards.config.field_geometric_calculated_length_all = Navarra.dashboards.config.field_geometric_calculated_length;
            Navarra.calculated_and_script_fields.Calculate(calculated_field,"", "","", "geometry_edition",field.key,geom);
          }
          });
      }
      else {
        geometries_to_edit.forEach(function(geom){
         data.father_fields.forEach(function(field){
          if(field.calculated_field=='{"provincia":""}' || field.calculated_field=='{"municipio":""}' || field.calculated_field=='{"superficie":""}' || field.calculated_field=='{"longitud":""}' || field.calculated_field=='{"googleMaps":""}' || field.calculated_field=='{"LatLong":""}'){
            var calculated_field = field.calculated_field;
            Navarra.dashboards.config.field_geometric_calculated_length_all = Navarra.dashboards.config.field_geometric_calculated_length * geometries_to_edit.length;
            Navarra.calculated_and_script_fields.Calculate(calculated_field,"", "","", "geometry_edition",field.key,geom);
          }
          });
       });
      }
      //Si no hay campos a calcular ir a guardar
      if(Navarra.dashboards.config.field_geometric_calculated_length==0){save_geometry_width_calculated_fields()}
   }
  });
}

function get_geom_to_calculate(){
    if(type_geometry=="Polygon"){
      is_line = false;
    } else {
      is_line = true;
    }
      var centroid = get_centroid(is_line);
      var geom = {
        id: geometries_to_edit[0].id,
        latLng: {
          lat: centroid.geometry.coordinates[1],
          lng: centroid.geometry.coordinates[0]
        }
      }
  return geom;
}
function new_geometry(event){
  event.stopPropagation();
  //Cierra modal lateral
  $("#info-modal").modal("hide");
  Navarra.project_types.config.item_selected="";
  Navarra.project_types.config.data_dashboard = "";
  $('.leaflet-container').addClass('cursor-crosshair');
  delete_markers();
  $('#confirmation_geometry_button').addClass('confirmation_geometry_button_new');
  $('#confirmation_geometry_button').removeClass('confirmation_geometry_button_edit');
  close_all_popups();
  markers = new L.LayerGroup();
  set_onclick_map(false);
  $('#checkbox_split_line').prop("checked",false);
  $('#div_split_line').addClass('d-none');
}

function open_new_fields(){
  show_item_info(0, true, false, true, false, true);
  set_onclick_map(true);
}

function get_geometries_to_save(){
  return geometries_to_save;
}

function set_onclick_map(is_default) {
  if(is_default){
    // onclick elimina selección fuera del polígono de selección
    $('.leaflet-container').removeClass("cursor-crosshair");
    mymap.off('click', on_click_map_create);
    mymap.on('click', on_click_map_default);
    mymap.off('dblclick', on_dblclick_map_create);
    mymap.doubleClickZoom.enable();

  } else{
    // on click crea geometría en el mapa
    mymap.off('click', on_click_map_default)
    mymap.on('click', on_click_map_create);
    // on doubleclick cierra geometría en el mapa
    mymap.doubleClickZoom.disable();
    mymap.on('dblclick', on_dblclick_map_create);
  }
}

function on_click_map_default(ev){
if (Navarra.dashboards.config.size_polygon.length != 0){
    var coord = ev.latlng;
    var polyPoints = Navarra.dashboards.config.size_polygon[0];
    var x = ev.latlng.lat
    var y = ev.latlng.lng;
    var inside = false;
    for (var i = 0, j = polyPoints.length - 1; i < polyPoints.length; j = i++) {
      var xi = polyPoints[i][1], yi = polyPoints[i][0];
      var xj = polyPoints[j][1], yj = polyPoints[j][0];
      var intersect = ((yi > y) != (yj > y))
        && (x < (xj - xi) * (y - yi) / (yj - yi) + xi);
      if (intersect) inside = !inside;
    }
    if(!inside){
      remove_polygon_draw();
    }
  }
}

function on_click_map_create(e){
  $('.confirmation_geometry').removeClass('d-none');
  var type_geometry = Navarra.dashboards.config.type_geometry;
  if(type_geometry == "Point" && markers != undefined){
    mymap.removeLayer(markers);
    markers = new L.LayerGroup();
  }
  var latlong = new L.LatLng(e.latlng.lat,e.latlng.lng);
  marker_new = create_marker(latlong,0,0, false);
  markers.addLayer(marker_new);
  mymap.addLayer(markers);
  if(type_geometry == "Polygon" || type_geometry == "LineString"){
    create_polygon_edit();
  }
  var data_to_edit = {
      id: 0,
      latLng: latlong
    }
    geometries_to_edit = [];
    geometries_to_edit.push(data_to_edit);
  return false;
}

function on_dblclick_map_create(ev){
   set_onclick_map(true);
}

function get_area(){
  polygon = create_polygon_turf(false);
  var area = turf.area(polygon);
  return area;
}
function get_length(){
  polygon = create_polygon_turf(true);
  var length_line = turf.length(polygon);
  return length_line;
}
function get_length_split(){
  array_lineString = create_polygon_turf_split();
  var length_line = [];
  array_lineString.forEach(function (line){
    var length_line_split = Math.round(turf.length(line)*1000*100)/100;
    length_line.push(length_line_split)
  })

  return length_line;
}
function get_centroid(is_line){
  polygon = create_polygon_turf(is_line);
  var centroid = turf.centroid(polygon);
  return centroid;
}
function get_centroid_split(){
  array_lineString = create_polygon_turf_split();
  var array_centroid = [];
  array_lineString.forEach(function (line){
    var centroid_split = turf.centroid(line);
    array_centroid.push(centroid_split)
  });
  return array_centroid;
}
function create_polygon_turf(is_line){
  var coordinates_newpol1=[];
  var coordinates_newpol2=[];
  polygon_edit_vertexs.forEach(function (layer,index) {
    var coordinates_newpol = [];
    coordinates_newpol.push(layer.getLatLng().lng);
    coordinates_newpol.push(layer.getLatLng().lat);
    coordinates_newpol1.push(coordinates_newpol)
  });
  var coordinates_newpol = [];
  if(!is_line){
    coordinates_newpol.push(polygon_edit_vertexs[0].getLatLng().lng);
    coordinates_newpol.push(polygon_edit_vertexs[0].getLatLng().lat);
    coordinates_newpol1.push(coordinates_newpol)
    coordinates_newpol2.push(coordinates_newpol1)
    var polygon = turf.polygon(coordinates_newpol2);
  } else {
    var polygon = turf.lineString(coordinates_newpol1);
  }

    return polygon;
}

function create_polygon_turf_split(){
  //crea un LineString para cada segmento
  var array_lineString =[];
  let previous_vertex = null;
  polygon_edit_vertexs.forEach(function (layer,index) {
    if(index!=0){
      var coordinates_newpol1=[];
      var coordinates_newpol = [];
      coordinates_newpol.push(previous_vertex.getLatLng().lng);
      coordinates_newpol.push(previous_vertex.getLatLng().lat);
      coordinates_newpol1.push(coordinates_newpol);
      var coordinates_newpol = [];
      coordinates_newpol.push(layer.getLatLng().lng);
      coordinates_newpol.push(layer.getLatLng().lat);
      coordinates_newpol1.push(coordinates_newpol);
      var polygon = turf.lineString(coordinates_newpol1);
      array_lineString.push(polygon);
    }
    previous_vertex = layer;
    var coordinates_newpol = [];
  });

    return array_lineString;
}

function show_prefilters_subform_labels() {
  current_layer_id = Navarra.dashboards.config.project_type_id

  $.ajax({
    type: 'GET',
    url: '/project_types/get_prefilters_subforms_labels',
    dataType: 'json',
    data: {
      current_layer_id: current_layer_id
    },
    success: function(data) {
      var container = $('#prefilters_labels_to_show');
      container.empty();

      Object.keys(data.project_info).forEach(function(key) {
        var titleDiv = $('<div>', { text: key });
        var list = $('<ul>');
        data.project_info[key].forEach(function(value) {
          var checkbox = $('<input>', { type: 'checkbox', class: 'custom-control-input', id: value });
          var labelElement = $('<label>', { class: 'custom-control-label', for: value, text: value });
          var listItem = $('<li>').append(checkbox, labelElement);
          list.append(listItem);
        });

        titleDiv.append(list);
        container.append(titleDiv);
      });

      if (Object.keys(data["project_info"]).length != 0) {
        var selectAllButton = $('<i>', { class: 'fa fa-toggle-on mt-3 mb-3 ml-2 fa-lg', title: 'Seleccionar Todas' });
        selectAllButton.click(select_all_subforms_labels);

        var createButton = $('<i>', { class: 'fas fa-check-circle mt-3 mb-3 ml-4 fa-lg', title: 'Crear Etiquetas de Subformularios' });
        createButton.click(find_prefilters_labels);

        var deleteButton = $('<i>', { class: 'fas fa-trash-alt mt-3 mb-3 ml-4 fa-lg', title: 'Eliminar Etiquetas de Subformularios' });
        deleteButton.click(delete_subforms_labels);

        container.append(selectAllButton);
        container.append(createButton);
        container.append(deleteButton);
      }
      container.removeClass('d-none');
    }
  });
  var emptyContainer = document.getElementById('empty_container');
  emptyContainer.classList.toggle('d-none');

  $('#subforms_labels_dropdown').click(function() {
    var modalWidth = $('#customLayerModal').outerWidth();
    $('.status_panel').css('left', modalWidth);
    $('.status_panel').css('top', '61.3px');
  });
}

function find_prefilters_labels(){
  var selectedElements = [];

  $('#prefilters_labels_to_show .custom-control-input').each(function() {
    if ($(this).prop('checked')) {
      var labelText = $(this).siblings('label').text().trim();
      if (labelText) {
        selectedElements.push(labelText);
      }
    }
  });

  show_labels_subfields(true, selectedElements);
}

function delete_subforms_labels(){
  if (typeof(labels_subfields) != 'undefined') {
    mymap.removeLayer(labels_subfields);
  }
  $('#prefilters_labels_to_show .custom-control-input').each(function() {
    if ($(this).prop('checked')) {
      $(this).prop('checked', false);
    }
  });
}

function select_all_subforms_labels(){
  $('#prefilters_labels_to_show .custom-control-input').each(function() {
    if ($(this).prop('checked') == false) {
      $(this).prop('checked', true);
    } else {
      $(this).prop('checked', false);
    }
  });
}

function get_latlng(){
  var coordinates_newpol1=[];
  var coordinates_newpol2=[];
  polygon_edit_vertexs.forEach(function (layer,index) {
    var coordinates_newpol = [];
    coordinates_newpol.push(layer.getLatLng().lng);
    coordinates_newpol.push(layer.getLatLng().lat);
    coordinates_newpol1.push(coordinates_newpol)
  });
  var coordinates_newpol = [];
    coordinates_newpol.push(polygon_edit_vertexs[0].getLatLng().lng);
    coordinates_newpol.push(polygon_edit_vertexs[0].getLatLng().lat);
    coordinates_newpol1.push(coordinates_newpol)
    coordinates_newpol2.push(coordinates_newpol1)
    var polygon = turf.polygon(coordinates_newpol2);
    var area = turf.area(polygon);
    return area;
}

function color_by_attribute_function(color_by_attributte_field, breaks,colors,field_name, is_subform, sub_values, is_value){
$('#text_toast').html("Buscando datos para colorear ...");
$('#toast').toast('show');
var cql_filter =  getCQLFilter(true, true);
var defaultParameters = {
    authkey: Navarra.dashboards.config.geo_key,
    service: 'WFS',
    version: '2.0.0',
    crs: L.CRS.EPSG4326,
    srsName: 'EPSG:4326',
    request: 'GetFeature',
    typeName: Navarra.dashboards.config.current_tenement+':'+Navarra.dashboards.config.name_layer,
    outputFormat: 'application/json',
    CQL_FILTER: cql_filter
  };
  current_tenement = Navarra.dashboards.config.current_tenement;
  var owsrootUrl = protocol + "//" + url + ":" + port + "/geoserver/"+current_tenement+"/wfs";
  var parameters = L.Util.extend(defaultParameters);
  var URL = owsrootUrl + L.Util.getParamString(parameters);
  $.ajax({
    url: URL,
    success: function (data) {
      try{
        var points = data;
        //si es subformulario, agrega el resultado en el properties del feature
        if(is_subform){
          $('#text_toast').html("Calculando "+field_name+". Por favor espere");
          $('#toast').toast('show');
          var subform_values = JSON.parse(sub_values);
          points.features.forEach(function(feature){
            var id_feature = feature.properties["app_id"];
            subform_values.forEach(function(sub){
              if(sub.id == id_feature){
                new_propertie = sub.interpolate_field;
              }
            })
            feature.properties[color_by_attributte_field] = new_propertie;
          });
        }
        if(!is_value){
          points.features = points.features.filter(v => !isNaN(v.properties[color_by_attributte_field]));
        }
        let leyend = '<i class="fas fa-times" style="float:right" onclick="Navarra.geomaps.cancel_color_attr()"></i>'
        leyend += '<p class="mt-2">'+field_name+'</p>';
        if(is_value) {
          for (b=0;b<breaks.length;b++){
              leyend += '<div class="d-flex mt-1 mb-1">';
              leyend += '<div class="status_panel_color" style="background:'+colors[b]+'"></div>';
              leyend += '<h6 class="status_panel_text d-inline">'+breaks[b].replace(/[\[\]]/g, "").replace(/\", \"/g, " | ").replace(/\"/g, "")+'</h6>';
              leyend += '</div>';
          }

        } else {
          for (b=0;b<breaks.length-1;b++){
              leyend += '<div class="d-flex mt-1 mb-1">';
              leyend += '<div class="status_panel_color" style="background:'+colors[b]+'"></div>';
              leyend += '<h6 class="status_panel_text d-inline">'+breaks[b]+' - '+breaks[b+1]+'</h6>';
              leyend += '</div>';
          }
        }


        if(geojson_color_attr != undefined) {
          mymap.removeLayer(geojson_color_attr);
        }

        if(is_value) {
          if(type_geometry=="Polygon" || type_geometry=="LineString"){
            geojson_color_attr = new L.geoJson(points, {
              style: function (feature) {
                var colorRange = colors[breaks.length-1];
                for (b=0;b<breaks.length;b++){
                  if(feature.properties[color_by_attributte_field] === breaks[b]) {
                    colorRange = colors[b];
                  }
                }
                if (type_geometry=="Polygon") {
                  return {weight: 1, color: colorRange, opacity: 1,
                    fillColor: colorRange, fillOpacity: 0.6
                  };
                }
                if (type_geometry=="LineString"){
                  return {weight: 6, color: colorRange, opacity: 1,
                    fillColor: colorRange, fillOpacity: 0.6
                  };
                }
              }
            }).addTo(mymap);
          }
          if(type_geometry=="Point"){
            var geojsonOptions = (feature) => {
              var colorRange = colors[breaks.length-1];
                for (b=0;b<breaks.length;b++){
                  if(feature.properties[color_by_attributte_field] === breaks[b]) {
                    colorRange = colors[b];
                  }
                }
              return {
                radius: 6,
                fillColor: colorRange,
                color: colorRange,
                weight: 1,
                opacity: 1,
                fillOpacity: 0.6
              }
            };
            geojson_color_attr = new L.geoJson(points  ,{
                pointToLayer: function(feature,latlng){
                return L.circleMarker(latlng,geojsonOptions(feature));
              }
            }).addTo(mymap);
          }
        } else {
          if(type_geometry=="Polygon" || type_geometry=="LineString"){
            geojson_color_attr = new L.geoJson(points, {
              style: function (feature) {
                var colorRange = colors[breaks.length-2];
                for (b=0;b<breaks.length-1;b++){
                  if(parseFloat(feature.properties[color_by_attributte_field])>=breaks[b]
                    && parseFloat(feature.properties[color_by_attributte_field])<breaks[b+1]  ) {
                    colorRange = colors[b];
                  }
                }
                if (type_geometry=="Polygon") {
                  return {weight: 1, color: colorRange, opacity: 1,
                    fillColor: colorRange, fillOpacity: 0.6
                  };
                }
                if (type_geometry=="LineString") {
                  return {weight: 6, color: colorRange, opacity: 1,
                    fillColor: colorRange, fillOpacity: 0.6
                  };
                }
              },
            }).addTo(mymap);
          }
          if(type_geometry=="Point"){
            var geojsonOptions = (feature) => {
              var colorRange = colors[breaks.length-2];
                for (b=0;b<breaks.length-1;b++){
                  if(parseFloat(feature.properties[color_by_attributte_field])>=breaks[b]
                    && parseFloat(feature.properties[color_by_attributte_field])<breaks[b+1]  ) {
                    colorRange = colors[b];
                  }
                }
              return {
                radius: 6,
                fillColor: colorRange,
                color: colorRange,
                weight: 1,
                opacity: 1,
                fillOpacity: 0.6
              }
            };
            geojson_color_attr = new L.geoJson(points  ,{
                pointToLayer: function(feature,latlng){
                return L.circleMarker(latlng,geojsonOptions(feature));
              }
            }).addTo(mymap);
          }
        }

        mymap.removeLayer(project_current);
        mymap.removeLayer(project_current_selected);
        if(projectss != undefined) {mymap.removeLayer(projectss);}
        $('.status_panel_default').addClass('d-none');
        $('.status_panel_colored_by_attr').empty();
        $('.status_panel_colored_by_attr').append(leyend);
    }catch(e) {
      $('#text_toast').html("Hubo un problema para colorear por ese atributo");
      $('#toast').toast('show');
    }
  }
  });
}

function cancel_color_attr(){
  if(projectss != undefined) {
    mymap.addLayer(projectss);
  } else {
    mymap.addLayer(project_current);
    mymap.addLayer(project_current_selected);
  }
  if(geojson_color_attr != undefined) {
    mymap.removeLayer(geojson_color_attr);
  }
  $('.status_panel_default').removeClass('d-none');
  $('.status_panel_colored_by_attr').empty();
}

function interpolate(interpolation_field, breaks,colors,celd_size,weight ,get_celd_size,field_name, is_subform, sub_values, save_interpolation, interpolation_name){
  if(!get_celd_size){
    $('#text_toast').html("Buscando datos ...");
    $('#toast').toast('show');
  }
  var cql_filter =  getCQLFilter(true);
  var defaultParameters = {
    authkey: Navarra.dashboards.config.geo_key,
    service: 'WFS',
    version: '1.0.0',
    crs: L.CRS.EPSG4326,
    request: 'GetFeature',
    typeName: Navarra.dashboards.config.current_tenement+':'+Navarra.dashboards.config.name_layer,
    outputFormat: 'application/json',
    CQL_FILTER: cql_filter
  };
  current_tenement = Navarra.dashboards.config.current_tenement;
  var owsrootUrl = protocol + "//" + url + ":" + port + "/geoserver/"+current_tenement+"/wfs";
  var parameters = L.Util.extend(defaultParameters);
  var URL = owsrootUrl + L.Util.getParamString(parameters);
  $.ajax({
    url: URL,
    success: function (data) {
      var points = data;
      if(get_celd_size){
        // entra para calcular tamaño de la celda
        var enveloped = turf.envelope(points);
        var area_envelope = turf.area(enveloped)/1000000;
        $('#celd_size').val(Math.round(Math.sqrt(area_envelope)/250*100000)/100000);
      } else {
        //si es subformulario, agrega el resultado en el properties del feature
        if(is_subform){
          $('#text_toast').html("Calculando "+field_name+". Por favor espere");
          $('#toast').toast('show');
          var subform_values = JSON.parse(sub_values);
          points.features.forEach(function(feature){
            var id_feature = feature.properties["app_id"];
            subform_values.forEach(function(sub){
              if(sub.id == id_feature){
                new_propertie = sub.interpolate_field;
              }
            })
            feature.properties[interpolation_field] = new_propertie;
          });
        }
        let leyend = '<i class="fas fa-times" style="float:right" onclick="Navarra.geomaps.cancel_color_attr()"></i>'
        leyend += '<p class="mt-2">'+field_name+'</p>';
        for (b=0;b<breaks.length-1;b++){
          leyend += '<div class="d-flex mt-1 mb-1">';
          leyend += '<div class="status_panel_color" style="background:'+colors[b]+'"></div>';
          leyend += '<h6 class="status_panel_text d-inline">'+breaks[b]+' - '+breaks[b+1]+'</h6>';
          leyend += '</div>';
        }
        $('#text_toast').html("Descartando datos inválidos");
        $('#toast').toast('show');
        $('.status_panel_default').addClass('d-none');
        $('.status_panel_colored_by_attr').empty();
        $('.status_panel_colored_by_attr').append(leyend);
        // elimina features que no tienen datos válidos
        points.features = points.features.filter(v => !isNaN(v.properties[interpolation_field]));
        get_layers_clip(points, interpolation_field,breaks,colors,field_name, save_interpolation, interpolation_name);
      }
    }
  });
}

function get_layers_clip(points, interpolation_field,breaks,colors,field_name, save_interpolation, interpolation_name) {
  // trae capas
  var active_internal_layers = get_layers_checked();
  if(active_internal_layers.length>0){
    $('#text_toast').html("Extrapolando hacia los límites de la capa. Por favor espere");
    $('#toast').toast('show');

    data = project_type_layers;
    var concat_features = null;
    var layers_count = 0;
    $.each(data, function(lay, dat) {
      if((active_internal_layers.indexOf(dat.layer)>=0 || active_internal_layers.indexOf(dat.layer+'-filtrados')>=0 )&& dat.type_geometry != 'Point'){
        var cql_filter_layer =  getCQLFilter_layer(dat);
        if(active_internal_layers.indexOf(dat.layer+'-filtrados')>=0){
          //aplica filtro intercapas para mostrar solo aquellos registros que se intersectan con la capa activa
          var current_layer_filters = Navarra.project_types.config.current_layer_filters.replace(/'/g,"''");
          cql_filter_layer += " and INTERSECTS(the_geom, collectGeometries(queryCollection('" + workspace + ':' + name_layer + "', 'the_geom', '" + current_layer_filters + "')))";
        }
        var defaultParameters = {
          authkey: Navarra.dashboards.config.geo_key,
          service: 'WFS',
          version: '1.0.0',
          crs: L.CRS.EPSG4326,
          request: 'GetFeature',
          typeName: Navarra.dashboards.config.current_tenement+':'+dat.layer,
          outputFormat: 'application/json',
          CQL_FILTER: cql_filter_layer
        };
        current_tenement = Navarra.dashboards.config.current_tenement;
        var owsrootUrl = protocol + "//" + url + ":" + port + "/geoserver/"+current_tenement+"/wfs";
        var parameters = L.Util.extend(defaultParameters);
        var URL = owsrootUrl + L.Util.getParamString(parameters);
        $.ajax({
          url: URL,
          success: function (data) {
            if(concat_features == null) {
              concat_features = data;
            } else {
              concat_features = turf.featureCollection(concat_features.features.concat(data.features));
              }
              layers_count ++;
              if(layers_count==active_internal_layers.length){
              // última capa
              var combined = turf.combine(concat_features);
              // var geojson = L.geoJSON(combined).addTo(mymap);
              var bbox = turf.bbox(combined);
              //obtiene los valores de muestras más extremos y los clona hacia el borde del bbox para obtener una interpolación completa en la capa
              var max_lat = Math.max.apply(null, points.features.map((v) => v.geometry.coordinates[1]));
              var min_lat = Math.min.apply(null, points.features.map((v) => v.geometry.coordinates[1]));
              var max_lng = Math.max.apply(null, points.features.map((v) => v.geometry.coordinates[0]));
              var min_lng = Math.min.apply(null, points.features.map((v) => v.geometry.coordinates[0]));

              $.each(points.features, function(i, v) {
                if (v.geometry.coordinates[1] == max_lat) {
                  v1 = turf.clone(v);
                  v1.geometry.coordinates[1] = bbox[3];
                  points = turf.featureCollection(points.features.concat(v1));
                }
                if (v.geometry.coordinates[1] == min_lat) {
                  v1 = turf.clone(v);
                  v1.geometry.coordinates[1] = bbox[1];
                  points = turf.featureCollection(points.features.concat(v1));
                }
                if (v.geometry.coordinates[0] == max_lng) {
                  v1 = turf.clone(v);
                  v1.geometry.coordinates[0] = bbox[2];
                  points = turf.featureCollection(points.features.concat(v1));
                }
                if (v.geometry.coordinates[0] == min_lng) {
                  v1 = turf.clone(v);
                  v1.geometry.coordinates[0] = bbox[0];
                  points = turf.featureCollection(points.features.concat(v1));
                }
              });

              if(points.features.length>4000){
                if(points.features.length>10000){
                  $('#text_alert_decision').html("Usted está por interpolar "+ points.features.length +" puntos. Este proceso tomar demasiado tiempo. Se aconseja reducir el área a interpolar. Desea Continuar de todos modos ?");
                } else {
                  $('#text_alert_decision').html("Usted está por interpolar "+ points.features.length +" puntos. Este proceso puede tardar varios minutos. Desea Continuar ?");
                }
                $('#decision_yes').attr('onclick','Navarra.geomaps.continue_iterpolation('+JSON.stringify(points)+', "'+interpolation_field +'" ,'+JSON.stringify(breaks)+','+JSON.stringify(colors)+', "'+field_name +'", '+JSON.stringify(combined)+')');
                $('#toast_decision').toast('show');
              } else{
                continue_iterpolation(points, interpolation_field,breaks,colors,field_name, combined , save_interpolation,interpolation_name );
              }
              }
          }
        });
      }
    });
  } else {
    if(points.features.length>4000){
      if(points.features.length>10000){
        $('#text_alert_decision').html("Usted está por interpolar "+ points.features.length +" puntos. Este proceso puede tomar demasiado tiempo. Se aconseja reducir el área a interpolar. Desea Continuar de todos modos ?");
      } else {
        $('#text_alert_decision').html("Usted está por interpolar "+ points.features.length +" puntos. Este proceso puede tardar varios minutos. Desea Continuar ?");
      }
      $('#decision_yes').attr('onclick','Navarra.geomaps.continue_iterpolation('+JSON.stringify(points)+', "'+interpolation_field +'" ,'+JSON.stringify(breaks)+','+JSON.stringify(colors)+', "'+field_name +'", null)');
      $('#toast_decision').toast('show');
    } else{
      continue_iterpolation(points, interpolation_field,breaks,colors,field_name, null, save_interpolation, interpolation_name);
    }
  }
}

function continue_iterpolation(points, interpolation_field,breaks,colors,field_name,combined, save_interpolation, interpolation_name){
  $('#toast_decision').toast("hide");
  $('#text_toast').html("Iterpolando ...");
  $('#toast').toast('show');
  var options = {gridType: 'points', property: interpolation_field, units: 'kilometers', weight: parseFloat(weight)};

  setTimeout(function(){ // delay para que cierre el toast_decision.
    var grid = turf.interpolate(points,parseFloat(celd_size), options);
    if(grid.features.length>400000){
      if(points.features.length>1000000){
        $('#text_alert_decision').html("La interpolación ha generado una grilla de "+ grid.features.length +" puntos. Este proceso puede tomar demasiado tiempo. Se aconseja aumentar el tamaño de la celda y/o reducir el área a interpolar. Desea Continuar de todos modos ?");
      } else {
        $('#text_alert_decision').html("La interpolación ha generado una grilla de "+ grid.features.length +" puntos. Este proceso puede tardar varios minutos. Desea Continuar ?");
      }
      $('#decision_yes').attr('onclick','Navarra.geomaps.continue_isobands('+JSON.stringify(grid)+', "'+interpolation_field +'" ,'+JSON.stringify(breaks)+','+JSON.stringify(colors)+', '+JSON.stringify(combined)+', "'+field_name +'")');
      $('#toast_decision').toast('show');
    } else{
      continue_isobands(grid, interpolation_field,breaks,colors,combined,field_name, save_interpolation, interpolation_name);
    }
  },200);
}

function continue_isobands(grid, interpolation_field,breaks,colors,combined,field_name, save_interpolation, interpolation_name){
  $('#toast_decision').toast("hide");
  $('#text_toast').html("Creando isopolígonos ...");
  $('#toast').toast('show');
  setTimeout(function(){ // delay para que cierre el toast_decision.
    get_isobands(grid, interpolation_field,breaks,colors,combined,field_name, save_interpolation, interpolation_name);
    //Para ver los puntos y sus propiedades
     /*
    grid.features.forEach(function(point){
    var new_pos = new L.latLng (point.geometry.coordinates[1], point.geometry.coordinates[0]);
    const popupContent = '<h7>' + point.properties[interpolation_field] + '</h7>'
    var new_grid = new L.marker(new_pos).addTo(mymap).bindPopup(popupContent);
    });
    */
    // var geojson = L.geoJSON(grid).addTo(mymap);
  },200);
}

function get_isobands(grid, interpolation_field, breaks, colors, combined, field_name,save_interpolation, interpolation_name){
  pointGrid = grid
  if(isobands_layer!=undefined){
    mymap.removeLayer(isobands_layer);
  }
  isobands_layer = new L.LayerGroup
  var lines = turf.isobands(pointGrid, breaks, {zProperty: interpolation_field});
  var count =0;
  var all_polys = [];
  var properties_poly = [];
  lines.features.forEach(function(multipoly,index_poly){
    multipoly.geometry.coordinates.forEach(function(polys){
      polys.forEach(function(poly){
        lat_lng_polys = [];
        lat_lng_poly = [];
        poly.forEach(function(geometry){
          lat_lng_geom = [];
          lat_lng_geom.push(geometry[0]);
          lat_lng_geom.push(geometry[1]);
          lat_lng_poly.push(lat_lng_geom);
        });
        lat_lng_polys.push(lat_lng_poly);
        var new_poly = turf.polygon(lat_lng_polys);
        properties_poly.push(breaks[index_poly]+" - "+breaks[index_poly+1]);
        var popupContent = '<br/><h7>'+field_name+'</h7>'
        popupContent += '<br/><h7>'+breaks[index_poly]+'</h7>'
        popupContent += '<h7> - '+breaks[index_poly+1]+'</h7>'

        if(combined==null){
          all_polys.push(lat_lng_polys);
          var geojson = L.geoJSON(new_poly,{color:colors[count], fillOpacity: 0.6}).on('click',function(e){
            var popup = new L.popup({autoPan:false})
            .setLatLng(new L.latLng([e.latlng.lat,e.latlng.lng]))
            .setContent(popupContent)
            .openOn(mymap);
          });
          isobands_layer.addLayer(geojson);
        } else {
          var intersection = turf.intersect(new_poly, combined.features[0]);
          if(intersection!=null){
            all_polys.push(intersection["geometry"]["coordinates"]);
          }
          var geojson = L.geoJSON(intersection,{color:colors[count], fillOpacity: 0.6}).on('click',function(e){
            var popup = new L.popup({autoPan:false})
            .setLatLng(new L.latLng([e.latlng.lat,e.latlng.lng]))
            .setContent(popupContent)
            .openOn(mymap);
          });
          isobands_layer.addLayer(geojson);
        }
      });
    });
    count ++;
  });
  // Guarda Proyecto
  if(save_interpolation){
    $('#text_toast').html("Guardando Proyecto Interpolación");
    $('#toast').toast('show');
    $.ajax({
      type: 'POST',
      url: '/project_types/save_interpolation',
      datatype: 'json',
      data: {
          name: interpolation_name,
          interpolation_name: field_name
      },
      success: function(data) {
        project_id_created = data.data;
        if (project_id_created ==null){
          $('#text_toast').html("Error al guardar Interpolación");
          $('#toast').toast('show');
        } else {
          // Crea los estados
          $('#text_toast').html("Guardando Estados");
          $('#toast').toast('show');
          $.ajax({
            type: 'POST',
            url: '/project_statuses/create_status_interpolation',
            datatype: 'json',
            data: {
              names: breaks,
              colors: colors,
              project_type_id: project_id_created
            },
            success: function(data_status) {
              $('#text_toast').html("Guardando Geometrías");
              $('#toast').toast('show');
              key_field_name = field_name.replace(/[^a-z0-9\s]/gi, '').replace(/\s+/g, '_').toLowerCase();
              var params = [];
              all_polys.forEach(function(po, index_poly){
                properties_to_save = {}
                properties_to_save[key_field_name] = properties_poly[index_poly]
                var geom = [];
                var latLng = {
                  latLng: po[0]
                }
                geom.push(latLng)
                var new_status = 0;
                data_status.data.forEach(function(st,i){
                  if(st.name == properties_poly[index_poly]){
                    new_status = st.id;
                  }
                });
                var param = {
                  project_type_id: project_id_created,
                  properties: JSON.stringify(properties_to_save),
                  subforms: [],
                  project_status_id: new_status,
                  geom: geom
                }
                params.push(param)
              });
              $.ajax({
                type: 'POST',
                url: '/projects/create_form',
                datatype: 'json',
                data: {
                  data: params,
                  is_interpolate: 'true'
                },
                success: function(data) {
                  $('#text_toast').html(data['status']);
                  $('#toast').toast('show');
                }
              });
            }
          });
        }

      } // Cierra primer success
   });
  }
  isobands_layer.addTo(mymap);
}

function intersect_layers(){
  get_zoomextent();
  wms_filter(true);
}

function open_iot_monitoring(app_id_popup){
  let iframeHtml = '<iframe src="https://iot.geoworks.com.ar/" ';
  iframeHtml+=' class="popup_iot"></iframe>'
  $(document.body).append(iframeHtml);
  //window.open('http://localhost:4200/'+app_id_popup+'/'+user_id);
}

  return {
    init: init,
    wms_filter: wms_filter,
    heatmap_data: heatmap_data,
    remove_heatmap: remove_heatmap,
    point_colors_data: point_colors_data,
    current_layer: current_layer,
    show_kpis: show_kpis,
    show_default_kpis: show_default_kpis,
    layers_internal: layers_internal,
    layers_external: layers_external,
    popup: popup,
    close_all_popups: close_all_popups,
    get_zoomextent: get_zoomextent,
    show_labels:show_labels,
    show_labels_in_others_layers:show_labels_in_others_layers,
    show_labels_subfields:show_labels_subfields,
    edit_geometry_in_map: edit_geometry_in_map,
    cancel_geometry: cancel_geometry,
    delete_markers: delete_markers,
    save_geometry: save_geometry,
    close_success_message_geometry: close_success_message_geometry,
    save_geometry_width_calculated_fields: save_geometry_width_calculated_fields,
    get_area: get_area,
    get_centroid_split: get_centroid_split,
    get_length: get_length,
    get_length_split: get_length_split,
    get_latlng:get_latlng,
    new_geometry: new_geometry,
    get_geometries_to_save: get_geometries_to_save,
    get_geom_to_calculate: get_geom_to_calculate,
    interpolate: interpolate,
    continue_iterpolation:continue_iterpolation,
    continue_isobands: continue_isobands,
    intersect_layers: intersect_layers,
    color_by_attribute_function: color_by_attribute_function,
    show_ndvi: show_ndvi,
    show_random_points: show_random_points,
    save_multipoints: save_multipoints,
    modal_save_multipoints: modal_save_multipoints,
    modal_points_number: modal_points_number,
    open_iot_monitoring: open_iot_monitoring,
    cancel_color_attr: cancel_color_attr,
    buttons_roles: buttons_roles,
    show_prefilters_subform_labels: show_prefilters_subform_labels
  }
}();
